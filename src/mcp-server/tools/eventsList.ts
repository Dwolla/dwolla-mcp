/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { eventsList } from "../../funcs/eventsList.js";
import { ListEventsRequest$zodSchema } from "../../models/listeventsop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: ListEventsRequest$zodSchema.optional(),
};

export const tool$eventsList: ToolDefinition<typeof args> = {
  name: "events-list",
  description: `List events

Returns a paginated list of events representing state changes to resources in your Dwolla application. Events track actions on customers, transfers, funding sources, and other resources, sorted by creation date (newest first). Events are retained for 30 days and are essential for webhook notifications and system activity monitoring.`,
  scopes: ["read"],
  annotations: {
    "destructiveHint": false,
    "idempotentHint": false,
    "openWorldHint": false,
    "readOnlyHint": false,
  },
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await eventsList(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
