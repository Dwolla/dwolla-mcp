/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { root_get } from "../../funcs/root_get.js";
import { formatResult, ToolDefinition } from "../tools.js";

export const tool$root_get: ToolDefinition = {
  name: "root-get",
  description: `root

The entry point that clients can use to discover and explore the entire API.`,
  tool: async (client, ctx) => {
    console.log("ðŸ”§ [root-get] Starting request");
    
    const [result, apiCall] = await root_get(
      client,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    console.log("ðŸ”§ [root-get] API call details:", {
      url: apiCall?.request?.url,
      method: apiCall?.request?.method,
      headers: apiCall?.request?.headers,
    });

    console.log("ðŸ”§ [root-get] Result details:", {
      ok: result.ok,
      resultType: typeof result,
      resultKeys: result.ok ? Object.keys(result.value) : ['ok', 'error']
    });

    console.log("ðŸ”§ [root-get] ApiCall details:", {
      apiCallType: typeof apiCall,
      apiCallKeys: apiCall && typeof apiCall === 'object' ? Object.keys(apiCall) : [],
      response: apiCall && 'response' in apiCall ? {
        status: apiCall.response?.status,
        statusText: apiCall.response?.statusText,
        headers: Object.fromEntries(apiCall.response?.headers?.entries() || []),
        type: typeof apiCall.response,
        constructor: apiCall.response?.constructor?.name
      } : 'No response'
    });

    if (!result.ok) {
      console.log("ðŸ”§ [root-get] Error details:", {
        error: result.error,
        message: result.error.message,
        stack: result.error.stack,
        response: 'response' in result.error ? result.error.response : 'No response available'
      });

      // Check if this is an SDK validation error with actual data
      if (result.error.name === 'SDKValidationError' && 'rawValue' in result.error) {
        const rawValue = result.error.rawValue as any;
        console.log("ðŸ”§ [root-get] Raw value from validation error:", rawValue);
        
        // If we have the actual Root data, return it despite the validation error
        if (rawValue && rawValue.Root) {
          console.log("ðŸ”§ [root-get] Extracting Root data from validation error");
          return formatResult(rawValue.Root, { response: apiCall?.response });
        }
      }
    }

    return formatResult(result, { response: apiCall?.response });
  },
};
