/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accounts_get } from "../../funcs/accounts_get.js";
import { GetAccountRequest$zodSchema } from "../../models/operations/getaccount.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: GetAccountRequest$zodSchema,
};

export const tool$accounts_get: ToolDefinition<typeof args> = {
  name: "accounts-get",
  description: `Retrieve Account Details

Retrieve basic account details belonging to the authorized Dwolla account.`,
  args,
  tool: async (client, args, ctx) => {
    console.log("ðŸ”§ [accounts-get] Starting request with args:", args);
    
    const [result, apiCall] = await accounts_get(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    console.log("ðŸ”§ [accounts-get] API call details:", {
      url: apiCall?.request?.url,
      method: apiCall?.request?.method,
      headers: apiCall?.request?.headers,
    });

    if (!result.ok) {
      console.log("ðŸ”§ [accounts-get] Error details:", {
        error: result.error,
        message: result.error.message,
        stack: result.error.stack,
      });

      // Check if this is an SDK validation error with actual data
      if (result.error.name === 'SDKValidationError' && 'rawValue' in result.error) {
        const rawValue = result.error.rawValue as any;
        console.log("ðŸ”§ [accounts-get] Raw value from validation error:", rawValue);
        
        // If we have the actual Account data, return it despite the validation error
        if (rawValue && rawValue.Account) {
          console.log("ðŸ”§ [accounts-get] Extracting Account data from validation error");
          return formatResult(rawValue.Account, { response: apiCall?.response });
        }
      }

      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    console.log("ðŸ”§ [accounts-get] Success! Response value:", result.value);
    const value = result.value;

    return formatResult(value, { response: apiCall?.response });
  },
};
