/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customersTransfersList } from "../../funcs/customersTransfersList.js";
import { ListCustomerTransfersRequest$zodSchema } from "../../models/listcustomertransfersop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: ListCustomerTransfersRequest$zodSchema,
};

export const tool$customersTransfersList: ToolDefinition<typeof args> = {
  name: "customers-transfers-list",
  description: `List and search transfers for a customer

Retrieve and search transfers for a specific Customer with comprehensive filtering and pagination support. Supports searching by customer details (name, email, business name), amount ranges, date ranges, transfer status, and correlation IDs for enhanced transaction discovery. Returns paginated transfer results including status, amounts, metadata, and links to source and destination funding sources. Use this endpoint for transaction history analysis and reconciliation purposes.`,
  scopes: ["read"],
  annotations: {
    "destructiveHint": false,
    "idempotentHint": false,
    "openWorldHint": false,
    "readOnlyHint": false,
  },
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await customersTransfersList(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
