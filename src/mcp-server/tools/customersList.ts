/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customersList } from "../../funcs/customersList.js";
import { ListAndSearchCustomersRequest$zodSchema } from "../../models/listandsearchcustomersop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: ListAndSearchCustomersRequest$zodSchema.optional(),
};

export const tool$customersList: ToolDefinition<typeof args> = {
  name: "customers-list",
  description: `List and search customers

Returns a paginated list of customers sorted by creation date. Supports fuzzy search across customer names, business names, and email addresses, plus exact filtering by email and verification status. Default limit is 25 customers per page, maximum 200.`,
  scopes: ["read"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await customersList(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
