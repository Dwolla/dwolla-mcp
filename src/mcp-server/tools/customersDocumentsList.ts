/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { customersDocumentsList } from "../../funcs/customersDocumentsList.js";
import { ListCustomerDocumentsRequest$zodSchema } from "../../models/listcustomerdocumentsop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: ListCustomerDocumentsRequest$zodSchema,
};

export const tool$customersDocumentsList: ToolDefinition<typeof args> = {
  name: "customers-documents-list",
  description: `List documents for customer

Returns all identity verification documents submitted for a customer. Includes document status, verification results, document type (passport, driver's license, etc.), and failure reasons if verification was rejected. Used to track document submission and verification progress during the business verification process.`,
  scopes: ["read"],
  annotations: {
    "destructiveHint": false,
    "idempotentHint": false,
    "openWorldHint": false,
    "readOnlyHint": false,
  },
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await customersDocumentsList(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
