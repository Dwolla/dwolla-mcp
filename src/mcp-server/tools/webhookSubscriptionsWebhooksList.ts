/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { webhookSubscriptionsWebhooksList } from "../../funcs/webhookSubscriptionsWebhooksList.js";
import { ListWebhooksRequest$zodSchema } from "../../models/listwebhooksop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: ListWebhooksRequest$zodSchema,
};

export const tool$webhookSubscriptionsWebhooksList: ToolDefinition<
  typeof args
> = {
  name: "webhook-subscriptions-webhooks-list",
  description: `List webhooks for a webhook subscription

Retrieve all fired webhooks for a specific webhook subscription with comprehensive filtering and pagination support. Returns webhook delivery history including topics, attempts, request/response details, and delivery status over a rolling 30-day period. Supports filtering by resource ID, date ranges, and pagination parameters for detailed webhook delivery analysis. Critical for debugging webhook delivery issues and monitoring event notification success rates.`,
  scopes: ["read"],
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await webhookSubscriptionsWebhooksList(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
