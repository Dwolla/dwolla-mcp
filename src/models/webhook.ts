/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type WebhookSelf = { href?: string | undefined };

export const WebhookSelf$zodSchema: z.ZodType<
  WebhookSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

export type Subscription = { href?: string | undefined };

export const Subscription$zodSchema: z.ZodType<
  Subscription,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

export type WebhookRetry = { href?: string | undefined };

export const WebhookRetry$zodSchema: z.ZodType<
  WebhookRetry,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

export type WebhookEvent = { href?: string | undefined };

export const WebhookEvent$zodSchema: z.ZodType<
  WebhookEvent,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

export type WebhookLinks = {
  self?: WebhookSelf | undefined;
  subscription?: Subscription | undefined;
  retry?: WebhookRetry | undefined;
  event?: WebhookEvent | undefined;
};

export const WebhookLinks$zodSchema: z.ZodType<
  WebhookLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  event: z.lazy(() => WebhookEvent$zodSchema).optional(),
  retry: z.lazy(() => WebhookRetry$zodSchema).optional(),
  self: z.lazy(() => WebhookSelf$zodSchema).optional(),
  subscription: z.lazy(() => Subscription$zodSchema).optional(),
});

export type RequestHeader = {
  name?: string | undefined;
  value?: string | undefined;
};

export const RequestHeader$zodSchema: z.ZodType<
  RequestHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

export type RequestT = {
  timestamp?: string | undefined;
  url?: string | undefined;
  headers?: Array<RequestHeader> | undefined;
  body?: string | undefined;
};

export const RequestT$zodSchema: z.ZodType<RequestT, z.ZodTypeDef, unknown> = z
  .object({
    body: z.string().optional(),
    headers: z.array(z.lazy(() => RequestHeader$zodSchema)).optional(),
    timestamp: z.string().datetime({ offset: true }).optional(),
    url: z.string().optional(),
  });

export type ResponseHeader = {
  name?: string | undefined;
  value?: string | undefined;
};

export const ResponseHeader$zodSchema: z.ZodType<
  ResponseHeader,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  value: z.string().optional(),
});

export type ResponseT = {
  timestamp?: string | undefined;
  headers?: Array<ResponseHeader> | undefined;
  statusCode?: number | undefined;
  body?: string | undefined;
};

export const ResponseT$zodSchema: z.ZodType<ResponseT, z.ZodTypeDef, unknown> =
  z.object({
    body: z.string().optional(),
    headers: z.array(z.lazy(() => ResponseHeader$zodSchema)).optional(),
    statusCode: z.number().int().optional(),
    timestamp: z.string().datetime({ offset: true }).optional(),
  });

export type Attempt = {
  id?: string | undefined;
  request?: RequestT | undefined;
  response?: ResponseT | undefined;
};

export const Attempt$zodSchema: z.ZodType<Attempt, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    request: z.lazy(() => RequestT$zodSchema).optional(),
    response: z.lazy(() => ResponseT$zodSchema).optional(),
  });

export type Webhook = {
  _links?: WebhookLinks | undefined;
  id?: string | undefined;
  topic?: string | undefined;
  accountId?: string | undefined;
  eventId?: string | undefined;
  subscriptionId?: string | undefined;
  attempts?: Array<Attempt> | undefined;
};

export const Webhook$zodSchema: z.ZodType<Webhook, z.ZodTypeDef, unknown> = z
  .object({
    _links: z.lazy(() => WebhookLinks$zodSchema).optional(),
    accountId: z.string().optional(),
    attempts: z.array(z.lazy(() => Attempt$zodSchema)).optional(),
    eventId: z.string().optional(),
    id: z.string().optional(),
    subscriptionId: z.string().optional(),
    topic: z.string().optional(),
  });
