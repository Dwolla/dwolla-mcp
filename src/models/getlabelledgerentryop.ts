/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ForbiddenError, ForbiddenError$zodSchema } from "./forbiddenerror.js";
import {
  LabelLedgerEntry,
  LabelLedgerEntry$zodSchema,
} from "./labelledgerentry.js";
import { NotFoundError, NotFoundError$zodSchema } from "./notfounderror.js";

export type GetLabelLedgerEntryRequest = { id: string };

export const GetLabelLedgerEntryRequest$zodSchema: z.ZodType<
  GetLabelLedgerEntryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().describe("A label ledger entry unique identifier"),
});

export type GetLabelLedgerEntryResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  LabelLedgerEntry?: LabelLedgerEntry | undefined;
  ForbiddenError?: ForbiddenError | undefined;
  NotFoundError?: NotFoundError | undefined;
};

export const GetLabelLedgerEntryResponse$zodSchema: z.ZodType<
  GetLabelLedgerEntryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  ForbiddenError: ForbiddenError$zodSchema.optional(),
  LabelLedgerEntry: LabelLedgerEntry$zodSchema.optional(),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
