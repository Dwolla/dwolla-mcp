/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  BeneficialOwner,
  BeneficialOwner$zodSchema,
} from "./beneficialowner.js";

export type RetrieveBeneficialOwnerRequest = { id: string };

export const RetrieveBeneficialOwnerRequest$zodSchema: z.ZodType<
  RetrieveBeneficialOwnerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().describe("Beneficial owner unique identifier"),
});

/**
 * not found
 */
export type RetrieveBeneficialOwnerResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const RetrieveBeneficialOwnerResponseBody$zodSchema: z.ZodType<
  RetrieveBeneficialOwnerResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("not found");

export type RetrieveBeneficialOwnerResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  BeneficialOwner?: BeneficialOwner | undefined;
  object?: RetrieveBeneficialOwnerResponseBody | undefined;
};

export const RetrieveBeneficialOwnerResponse$zodSchema: z.ZodType<
  RetrieveBeneficialOwnerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BeneficialOwner: BeneficialOwner$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() => RetrieveBeneficialOwnerResponseBody$zodSchema)
    .optional(),
});
