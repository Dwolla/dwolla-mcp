/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ForbiddenError, ForbiddenError$zodSchema } from "./forbiddenerror.js";
import { Label, Label$zodSchema } from "./label.js";
import { NotFoundError, NotFoundError$zodSchema } from "./notfounderror.js";

export type GetLabelRequest = { id: string };

export const GetLabelRequest$zodSchema: z.ZodType<
  GetLabelRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().describe("Label unique identifier"),
});

export type GetLabelResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Label?: Label | undefined;
  ForbiddenError?: ForbiddenError | undefined;
  NotFoundError?: NotFoundError | undefined;
};

export const GetLabelResponse$zodSchema: z.ZodType<
  GetLabelResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  ForbiddenError: ForbiddenError$zodSchema.optional(),
  Label: Label$zodSchema.optional(),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
