/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  FinicitySecureExchangeCreateExchangeRequestBody,
  FinicitySecureExchangeCreateExchangeRequestBody$zodSchema,
} from "../components/finicitysecureexchangecreateexchangerequestbody.js";
import {
  FlinksSecureExchangeCreateExchangeRequestBody,
  FlinksSecureExchangeCreateExchangeRequestBody$zodSchema,
} from "../components/flinkssecureexchangecreateexchangerequestbody.js";
import {
  ForbiddenError,
  ForbiddenError$zodSchema,
} from "../components/forbiddenerror.js";
import {
  InvalidExchange,
  InvalidExchange$zodSchema,
} from "../components/invalidexchange.js";
import {
  InvalidExchangeToken,
  InvalidExchangeToken$zodSchema,
} from "../components/invalidexchangetoken.js";
import {
  MXSecureExchangeCreateExchangeRequestBody,
  MXSecureExchangeCreateExchangeRequestBody$zodSchema,
} from "../components/mxsecureexchangecreateexchangerequestbody.js";
import {
  NotFoundError,
  NotFoundError$zodSchema,
} from "../components/notfounderror.js";
import {
  PlaidSecureExchangeCreateExchangeRequestBody,
  PlaidSecureExchangeCreateExchangeRequestBody$zodSchema,
} from "../components/plaidsecureexchangecreateexchangerequestbody.js";

/**
 * Parameters for creating an exchange
 */
export type CreateAccountExchangeRequest =
  | FinicitySecureExchangeCreateExchangeRequestBody
  | MXSecureExchangeCreateExchangeRequestBody
  | FlinksSecureExchangeCreateExchangeRequestBody
  | PlaidSecureExchangeCreateExchangeRequestBody;

export const CreateAccountExchangeRequest$zodSchema: z.ZodType<
  CreateAccountExchangeRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  FinicitySecureExchangeCreateExchangeRequestBody$zodSchema,
  MXSecureExchangeCreateExchangeRequestBody$zodSchema,
  FlinksSecureExchangeCreateExchangeRequestBody$zodSchema,
  PlaidSecureExchangeCreateExchangeRequestBody$zodSchema,
]).describe("Parameters for creating an exchange");

/**
 * Invalid Scope
 */
export type CreateAccountExchangeUnauthorizedResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const CreateAccountExchangeUnauthorizedResponseBody$zodSchema: z.ZodType<
  CreateAccountExchangeUnauthorizedResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("Invalid Scope");

/**
 * Bad Request
 */
export type CreateAccountExchangeResponseBodyUnion =
  | InvalidExchangeToken
  | InvalidExchange;

export const CreateAccountExchangeResponseBodyUnion$zodSchema: z.ZodType<
  CreateAccountExchangeResponseBodyUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  InvalidExchangeToken$zodSchema,
  InvalidExchange$zodSchema,
]).describe("Bad Request");

/**
 * Created
 */
export type CreateAccountExchangeResponseBody = {};

export const CreateAccountExchangeResponseBody$zodSchema: z.ZodType<
  CreateAccountExchangeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({}).describe("Created");

export type CreateAccountExchangeResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  twoHundredAndOneApplicationVndDwollaV1HalPlusJsonObject?:
    | CreateAccountExchangeResponseBody
    | undefined;
  fourHundredApplicationVndDwollaV1HalPlusJsonOneOf?:
    | InvalidExchangeToken
    | InvalidExchange
    | undefined;
  fourHundredAndOneApplicationVndDwollaV1HalPlusJsonObject?:
    | CreateAccountExchangeUnauthorizedResponseBody
    | undefined;
  ForbiddenError?: ForbiddenError | undefined;
  NotFoundError?: NotFoundError | undefined;
  Headers: { [k: string]: Array<string> };
};

export const CreateAccountExchangeResponse$zodSchema: z.ZodType<
  CreateAccountExchangeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  ForbiddenError: ForbiddenError$zodSchema.optional(),
  Headers: z.record(z.array(z.string())),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndOneApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    CreateAccountExchangeUnauthorizedResponseBody$zodSchema
  ).optional(),
  fourHundredApplicationVndDwollaV1HalPlusJsonOneOf: z.union([
    InvalidExchangeToken$zodSchema,
    InvalidExchange$zodSchema,
  ]).optional(),
  twoHundredAndOneApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    CreateAccountExchangeResponseBody$zodSchema
  ).optional(),
});
