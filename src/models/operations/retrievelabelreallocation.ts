/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ForbiddenError,
  ForbiddenError$zodSchema,
} from "../components/forbiddenerror.js";
import {
  NotFoundError,
  NotFoundError$zodSchema,
} from "../components/notfounderror.js";

export type RetrieveLabelReallocationRequest = { id: string };

export const RetrieveLabelReallocationRequest$zodSchema: z.ZodType<
  RetrieveLabelReallocationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().describe("Label reallocation unique identifier"),
});

export type RetrieveLabelReallocationSelf = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export const RetrieveLabelReallocationSelf$zodSchema: z.ZodType<
  RetrieveLabelReallocationSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  resourceType: z.string().optional(),
  type: z.string().optional(),
});

export type ToLedgerEntry = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export const ToLedgerEntry$zodSchema: z.ZodType<
  ToLedgerEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  resourceType: z.string().optional(),
  type: z.string().optional(),
});

export type FromLedgerEntry = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export const FromLedgerEntry$zodSchema: z.ZodType<
  FromLedgerEntry,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  resourceType: z.string().optional(),
  type: z.string().optional(),
});

export type RetrieveLabelReallocationLinks = {
  self?: RetrieveLabelReallocationSelf | undefined;
  toLedgerEntry?: ToLedgerEntry | undefined;
  fromLedgerEntry?: FromLedgerEntry | undefined;
};

export const RetrieveLabelReallocationLinks$zodSchema: z.ZodType<
  RetrieveLabelReallocationLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  fromLedgerEntry: z.lazy(() => FromLedgerEntry$zodSchema).optional(),
  self: z.lazy(() => RetrieveLabelReallocationSelf$zodSchema).optional(),
  toLedgerEntry: z.lazy(() => ToLedgerEntry$zodSchema).optional(),
});

/**
 * successful operation
 */
export type RetrieveLabelReallocationResponseBody = {
  _links?: RetrieveLabelReallocationLinks | undefined;
  created?: string | undefined;
};

export const RetrieveLabelReallocationResponseBody$zodSchema: z.ZodType<
  RetrieveLabelReallocationResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => RetrieveLabelReallocationLinks$zodSchema).optional(),
  created: z.string().datetime({ offset: true }).optional(),
}).describe("successful operation");

export type RetrieveLabelReallocationResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: RetrieveLabelReallocationResponseBody | undefined;
  ForbiddenError?: ForbiddenError | undefined;
  NotFoundError?: NotFoundError | undefined;
};

export const RetrieveLabelReallocationResponse$zodSchema: z.ZodType<
  RetrieveLabelReallocationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  ForbiddenError: ForbiddenError$zodSchema.optional(),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() => RetrieveLabelReallocationResponseBody$zodSchema)
    .optional(),
});
