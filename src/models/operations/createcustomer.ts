/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  BadRequestError,
  BadRequestError$zodSchema,
} from "../components/badrequesterror.js";
import {
  CreateReceiveOnlyRequestBody,
  CreateReceiveOnlyRequestBody$zodSchema,
} from "../components/createreceiveonlyrequestbody.js";
import {
  CreateUnverifiedCustomerRequestBody,
  CreateUnverifiedCustomerRequestBody$zodSchema,
} from "../components/createunverifiedcustomerrequestbody.js";
import {
  CreateVerifiedBusinessRequestBody,
  CreateVerifiedBusinessRequestBody$zodSchema,
} from "../components/createverifiedbusinessrequestbody.js";
import {
  CreateVerifiedPersonalRequestBody,
  CreateVerifiedPersonalRequestBody$zodSchema,
} from "../components/createverifiedpersonalrequestbody.js";
import {
  CreateVerifiedSolePropRequestBody,
  CreateVerifiedSolePropRequestBody$zodSchema,
} from "../components/createverifiedsoleproprequestbody.js";

/**
 * Parameters for customer to be created
 */
export type CreateCustomerRequest =
  | CreateUnverifiedCustomerRequestBody
  | CreateReceiveOnlyRequestBody
  | CreateVerifiedPersonalRequestBody
  | CreateVerifiedSolePropRequestBody
  | CreateVerifiedBusinessRequestBody;

export const CreateCustomerRequest$zodSchema: z.ZodType<
  CreateCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  CreateUnverifiedCustomerRequestBody$zodSchema,
  CreateReceiveOnlyRequestBody$zodSchema,
  CreateVerifiedPersonalRequestBody$zodSchema,
  CreateVerifiedSolePropRequestBody$zodSchema,
  CreateVerifiedBusinessRequestBody$zodSchema,
]).describe("Parameters for customer to be created");

/**
 * not found
 */
export type CreateCustomerNotFoundResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const CreateCustomerNotFoundResponseBody$zodSchema: z.ZodType<
  CreateCustomerNotFoundResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("not found");

/**
 * forbidden
 */
export type CreateCustomerForbiddenResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const CreateCustomerForbiddenResponseBody$zodSchema: z.ZodType<
  CreateCustomerForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("forbidden");

export type CreateCustomerResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  BadRequestError?: BadRequestError | undefined;
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonObject?:
    | CreateCustomerForbiddenResponseBody
    | undefined;
  fourHundredAndFourApplicationVndDwollaV1HalPlusJsonObject?:
    | CreateCustomerNotFoundResponseBody
    | undefined;
  Headers: { [k: string]: Array<string> };
};

export const CreateCustomerResponse$zodSchema: z.ZodType<
  CreateCustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequestError: BadRequestError$zodSchema.optional(),
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndFourApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    CreateCustomerNotFoundResponseBody$zodSchema
  ).optional(),
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    CreateCustomerForbiddenResponseBody$zodSchema
  ).optional(),
});
