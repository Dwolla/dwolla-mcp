/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  DuplicateResourceSchema,
  DuplicateResourceSchema$zodSchema,
} from "../components/duplicateresourceschema.js";
import {
  ForbiddenError,
  ForbiddenError$zodSchema,
} from "../components/forbiddenerror.js";
import {
  InvalidFileTypeSchema,
  InvalidFileTypeSchema$zodSchema,
} from "../components/invalidfiletypeschema.js";
import {
  MaximumNumberOfResourcesSchema,
  MaximumNumberOfResourcesSchema$zodSchema,
} from "../components/maximumnumberofresourcesschema.js";
import {
  NotFoundError,
  NotFoundError$zodSchema,
} from "../components/notfounderror.js";

export type CreateBeneficialOwnerDocumentFile = {
  fileName: string;
  content: Uint8Array | string;
};

export const CreateBeneficialOwnerDocumentFile$zodSchema: z.ZodType<
  CreateBeneficialOwnerDocumentFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string().base64(),
  fileName: z.string(),
});

/**
 * Upload a document for a beneficial owner.
 */
export type CreateBeneficialOwnerDocumentRequestBody = {
  documentType?: string | undefined;
  file?: CreateBeneficialOwnerDocumentFile | Blob | undefined;
};

export const CreateBeneficialOwnerDocumentRequestBody$zodSchema: z.ZodType<
  CreateBeneficialOwnerDocumentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentType: z.string().optional(),
  file: z.lazy(() => CreateBeneficialOwnerDocumentFile$zodSchema).optional(),
}).describe("Upload a document for a beneficial owner.");

export type CreateBeneficialOwnerDocumentRequest = {
  id: string;
  RequestBody: CreateBeneficialOwnerDocumentRequestBody;
};

export const CreateBeneficialOwnerDocumentRequest$zodSchema: z.ZodType<
  CreateBeneficialOwnerDocumentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => CreateBeneficialOwnerDocumentRequestBody$zodSchema),
  id: z.string().describe("beneficial owner unique identifier"),
});

/**
 * request entity too large
 */
export type CreateBeneficialOwnerDocumentRequestEntityTooLargeResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const CreateBeneficialOwnerDocumentRequestEntityTooLargeResponseBody$zodSchema:
  z.ZodType<
    CreateBeneficialOwnerDocumentRequestEntityTooLargeResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  }).describe("request entity too large");

/**
 * Bad Request
 */
export type CreateBeneficialOwnerDocumentResponseBody =
  | MaximumNumberOfResourcesSchema
  | InvalidFileTypeSchema
  | DuplicateResourceSchema;

export const CreateBeneficialOwnerDocumentResponseBody$zodSchema: z.ZodType<
  CreateBeneficialOwnerDocumentResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  MaximumNumberOfResourcesSchema$zodSchema,
  InvalidFileTypeSchema$zodSchema,
  DuplicateResourceSchema$zodSchema,
]).describe("Bad Request");

export type CreateBeneficialOwnerDocumentResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  oneOf?:
    | MaximumNumberOfResourcesSchema
    | InvalidFileTypeSchema
    | DuplicateResourceSchema
    | undefined;
  ForbiddenError?: ForbiddenError | undefined;
  NotFoundError?: NotFoundError | undefined;
  object?:
    | CreateBeneficialOwnerDocumentRequestEntityTooLargeResponseBody
    | undefined;
  Headers: { [k: string]: Array<string> };
};

export const CreateBeneficialOwnerDocumentResponse$zodSchema: z.ZodType<
  CreateBeneficialOwnerDocumentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  ForbiddenError: ForbiddenError$zodSchema.optional(),
  Headers: z.record(z.array(z.string())),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() =>
    CreateBeneficialOwnerDocumentRequestEntityTooLargeResponseBody$zodSchema
  ).optional(),
  oneOf: z.union([
    MaximumNumberOfResourcesSchema$zodSchema,
    InvalidFileTypeSchema$zodSchema,
    DuplicateResourceSchema$zodSchema,
  ]).optional(),
});
