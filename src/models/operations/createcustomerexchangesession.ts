/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  CreateCustomerExchangeSessionUnion,
  CreateCustomerExchangeSessionUnion$zodSchema,
} from "../components/createcustomerexchangesessionunion.js";
import {
  NotFoundError,
  NotFoundError$zodSchema,
} from "../components/notfounderror.js";

export type CreateCustomerExchangeSessionRequest = {
  id: string;
  CreateCustomerExchangeSession: CreateCustomerExchangeSessionUnion;
};

export const CreateCustomerExchangeSessionRequest$zodSchema: z.ZodType<
  CreateCustomerExchangeSessionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  CreateCustomerExchangeSession: CreateCustomerExchangeSessionUnion$zodSchema,
  id: z.string().describe("Customer's unique identifier"),
});

export type ResponseBodyForbidden2 = { code: string; message: string };

export const ResponseBodyForbidden2$zodSchema: z.ZodType<
  ResponseBodyForbidden2,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

export type ResponseBodyForbidden1 = { code: string; message: string };

export const ResponseBodyForbidden1$zodSchema: z.ZodType<
  ResponseBodyForbidden1,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
});

/**
 * forbidden
 */
export type CreateCustomerExchangeSessionForbiddenResponseBody =
  | ResponseBodyForbidden1
  | ResponseBodyForbidden2;

export const CreateCustomerExchangeSessionForbiddenResponseBody$zodSchema:
  z.ZodType<
    CreateCustomerExchangeSessionForbiddenResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => ResponseBodyForbidden1$zodSchema),
    z.lazy(() => ResponseBodyForbidden2$zodSchema),
  ]).describe("forbidden");

/**
 * unauthorized
 */
export type CreateCustomerExchangeSessionUnauthorizedResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const CreateCustomerExchangeSessionUnauthorizedResponseBody$zodSchema:
  z.ZodType<
    CreateCustomerExchangeSessionUnauthorizedResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  }).describe("unauthorized");

export type CreateCustomerExchangeSessionResponseBodyBadRequest3 = {
  code: string;
  message: string;
};

export const CreateCustomerExchangeSessionResponseBodyBadRequest3$zodSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequest3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string(),
    message: z.string(),
  });

export type CreateCustomerExchangeSessionResponseBodyBadRequest2 = {
  code: string;
  message: string;
};

export const CreateCustomerExchangeSessionResponseBodyBadRequest2$zodSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequest2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string(),
    message: z.string(),
  });

export type CreateCustomerExchangeSessionResponseBodyBadRequest1 = {
  code: string;
  message: string;
};

export const CreateCustomerExchangeSessionResponseBodyBadRequest1$zodSchema:
  z.ZodType<
    CreateCustomerExchangeSessionResponseBodyBadRequest1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string(),
    message: z.string(),
  });

/**
 * validation error
 */
export type CreateCustomerExchangeSessionBadRequestResponseBody =
  | CreateCustomerExchangeSessionResponseBodyBadRequest1
  | CreateCustomerExchangeSessionResponseBodyBadRequest2
  | CreateCustomerExchangeSessionResponseBodyBadRequest3;

export const CreateCustomerExchangeSessionBadRequestResponseBody$zodSchema:
  z.ZodType<
    CreateCustomerExchangeSessionBadRequestResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      CreateCustomerExchangeSessionResponseBodyBadRequest1$zodSchema
    ),
    z.lazy(() =>
      CreateCustomerExchangeSessionResponseBodyBadRequest2$zodSchema
    ),
    z.lazy(() =>
      CreateCustomerExchangeSessionResponseBodyBadRequest3$zodSchema
    ),
  ]).describe("validation error");

export type CreateCustomerExchangeSessionResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  fourHundredApplicationVndDwollaV1HalPlusJsonOneOf?:
    | CreateCustomerExchangeSessionResponseBodyBadRequest1
    | CreateCustomerExchangeSessionResponseBodyBadRequest2
    | CreateCustomerExchangeSessionResponseBodyBadRequest3
    | undefined;
  fourHundredAndOneApplicationVndDwollaV1HalPlusJsonObject?:
    | CreateCustomerExchangeSessionUnauthorizedResponseBody
    | undefined;
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonOneOf?:
    | ResponseBodyForbidden1
    | ResponseBodyForbidden2
    | undefined;
  NotFoundError?: NotFoundError | undefined;
  Headers: { [k: string]: Array<string> };
};

export const CreateCustomerExchangeSessionResponse$zodSchema: z.ZodType<
  CreateCustomerExchangeSessionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndOneApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    CreateCustomerExchangeSessionUnauthorizedResponseBody$zodSchema
  ).optional(),
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonOneOf: z.union([
    z.lazy(() => ResponseBodyForbidden1$zodSchema),
    z.lazy(() => ResponseBodyForbidden2$zodSchema),
  ]).optional(),
  fourHundredApplicationVndDwollaV1HalPlusJsonOneOf: z.union([
    z.lazy(() =>
      CreateCustomerExchangeSessionResponseBodyBadRequest1$zodSchema
    ),
    z.lazy(() =>
      CreateCustomerExchangeSessionResponseBodyBadRequest2$zodSchema
    ),
    z.lazy(() =>
      CreateCustomerExchangeSessionResponseBodyBadRequest3$zodSchema
    ),
  ]).optional(),
});
