/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  BadRequestSchema,
  BadRequestSchema$zodSchema,
} from "../components/badrequestschema.js";
import {
  DuplicateResourceSchema,
  DuplicateResourceSchema$zodSchema,
} from "../components/duplicateresourceschema.js";

/**
 * forbidden
 */
export type CreateFundingSourceForbiddenResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const CreateFundingSourceForbiddenResponseBody$zodSchema: z.ZodType<
  CreateFundingSourceForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("forbidden");

/**
 * Bad request or duplicate resource
 */
export type CreateFundingSourceResponseBody =
  | BadRequestSchema
  | DuplicateResourceSchema;

export const CreateFundingSourceResponseBody$zodSchema: z.ZodType<
  CreateFundingSourceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  BadRequestSchema$zodSchema,
  DuplicateResourceSchema$zodSchema,
]).describe("Bad request or duplicate resource");

export type CreateFundingSourceResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  oneOf?: BadRequestSchema | DuplicateResourceSchema | undefined;
  object?: CreateFundingSourceForbiddenResponseBody | undefined;
  Headers: { [k: string]: Array<string> };
};

export const CreateFundingSourceResponse$zodSchema: z.ZodType<
  CreateFundingSourceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() => CreateFundingSourceForbiddenResponseBody$zodSchema)
    .optional(),
  oneOf: z.union([
    BadRequestSchema$zodSchema,
    DuplicateResourceSchema$zodSchema,
  ]).optional(),
});
