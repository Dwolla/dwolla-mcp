/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  BadRequestError,
  BadRequestError$zodSchema,
} from "../components/badrequesterror.js";
import {
  NotFoundError,
  NotFoundError$zodSchema,
} from "../components/notfounderror.js";
import {
  StatusInvalidError,
  StatusInvalidError$zodSchema,
} from "../components/statusinvaliderror.js";
import {
  StatusNotAllowedError,
  StatusNotAllowedError$zodSchema,
} from "../components/statusnotallowederror.js";

/**
 * Parameters to cancel a transfer
 */
export type CancelTransferRequestBody = { status: string };

export const CancelTransferRequestBody$zodSchema: z.ZodType<
  CancelTransferRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
}).describe("Parameters to cancel a transfer");

export type CancelTransferRequest = {
  id: string;
  RequestBody: CancelTransferRequestBody;
};

export const CancelTransferRequest$zodSchema: z.ZodType<
  CancelTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => CancelTransferRequestBody$zodSchema),
  id: z.string().describe("ID of transfer"),
});

/**
 * 400 Bad Request
 */
export type CancelTransferResponseBodyUnion =
  | BadRequestError
  | StatusInvalidError
  | StatusNotAllowedError;

export const CancelTransferResponseBodyUnion$zodSchema: z.ZodType<
  CancelTransferResponseBodyUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  BadRequestError$zodSchema,
  StatusInvalidError$zodSchema,
  StatusNotAllowedError$zodSchema,
]).describe("400 Bad Request");

/**
 * successful operation
 */
export type CancelTransferResponseBody = {};

export const CancelTransferResponseBody$zodSchema: z.ZodType<
  CancelTransferResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({}).describe("successful operation");

export type CancelTransferResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: CancelTransferResponseBody | undefined;
  oneOf?:
    | BadRequestError
    | StatusInvalidError
    | StatusNotAllowedError
    | undefined;
  NotFoundError?: NotFoundError | undefined;
};

export const CancelTransferResponse$zodSchema: z.ZodType<
  CancelTransferResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() => CancelTransferResponseBody$zodSchema).optional(),
  oneOf: z.union([
    BadRequestError$zodSchema,
    StatusInvalidError$zodSchema,
    StatusNotAllowedError$zodSchema,
  ]).optional(),
});
