/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Customers, Customers$zodSchema } from "../components/customers.js";
import {
  ForbiddenError,
  ForbiddenError$zodSchema,
} from "../components/forbiddenerror.js";

export type ListAndSearchCustomersRequest = {
  limit?: number | undefined;
  offset?: number | undefined;
  search?: string | undefined;
  status?: string | undefined;
};

export const ListAndSearchCustomersRequest$zodSchema: z.ZodType<
  ListAndSearchCustomersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().describe("How many results to return").optional(),
  offset: z.number().int().describe("How many results to skip").optional(),
  search: z.string().describe("Searches on certain fields").optional(),
  status: z.string().describe("Filter by customer status").optional(),
});

export type ListAndSearchCustomersResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Customers?: Customers | undefined;
  ForbiddenError?: ForbiddenError | undefined;
};

export const ListAndSearchCustomersResponse$zodSchema: z.ZodType<
  ListAndSearchCustomersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Customers: Customers$zodSchema.optional(),
  ForbiddenError: ForbiddenError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
