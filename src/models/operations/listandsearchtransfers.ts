/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Transfers, Transfers$zodSchema } from "../components/transfers.js";

export type ListAndSearchTransfersRequest = {
  id: string;
  search?: string | undefined;
  startAmount?: string | undefined;
  endAmount?: string | undefined;
  startDate?: string | undefined;
  endDate?: string | undefined;
  status?: string | undefined;
  correlationId?: string | undefined;
  limit?: string | undefined;
  offset?: string | undefined;
};

export const ListAndSearchTransfersRequest$zodSchema: z.ZodType<
  ListAndSearchTransfersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  correlationId: z.string().describe(
    "A string value to search on if `correlationId` was specified for a transaction",
  ).optional(),
  endAmount: z.string().describe(
    "Only include transactions with an amount equal to or less than `endAmount`",
  ).optional(),
  endDate: z.string().describe(
    "Only include transactions created before this date. ISO-8601 format `YYYY-MM-DD`",
  ).optional(),
  id: z.string().describe("Account's unique identifier"),
  limit: z.string().describe(
    "Number of search results to return. Defaults to 25",
  ).optional(),
  offset: z.string().describe(
    "Number of search results to skip. Use for pagination",
  ).optional(),
  search: z.string().describe(
    "A string to search on fields `firstName`, `lastName`, `email`, `businessName`, Customer ID, and Account ID",
  ).optional(),
  startAmount: z.string().describe(
    "Only include transactions with an amount equal to or greater than `startAmount`",
  ).optional(),
  startDate: z.string().describe(
    "Only include transactions created after this date. ISO-8601 format `YYYY-MM-DD`",
  ).optional(),
  status: z.string().describe(
    "Filter on transaction status. Possible values are `pending`, `processed`, `failed`, or `cancelled`",
  ).optional(),
});

/**
 * not found
 */
export type ListAndSearchTransfersResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const ListAndSearchTransfersResponseBody$zodSchema: z.ZodType<
  ListAndSearchTransfersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("not found");

export type ListAndSearchTransfersResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Transfers?: Transfers | undefined;
  object?: ListAndSearchTransfersResponseBody | undefined;
};

export const ListAndSearchTransfersResponse$zodSchema: z.ZodType<
  ListAndSearchTransfersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  Transfers: Transfers$zodSchema.optional(),
  object: z.lazy(() => ListAndSearchTransfersResponseBody$zodSchema).optional(),
});
