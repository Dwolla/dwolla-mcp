/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  BeneficialOwnership,
  BeneficialOwnership$zodSchema,
} from "../components/beneficialownership.js";
import {
  ValidationErrorSchema,
  ValidationErrorSchema$zodSchema,
} from "../components/validationerrorschema.js";

/**
 * Parameters for certifying beneficial ownership for a Customer
 */
export type CertifyBeneficialOwnershipForCustomerRequestBody = {
  status: string;
};

export const CertifyBeneficialOwnershipForCustomerRequestBody$zodSchema:
  z.ZodType<
    CertifyBeneficialOwnershipForCustomerRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    status: z.string(),
  }).describe("Parameters for certifying beneficial ownership for a Customer");

export type CertifyBeneficialOwnershipForCustomerRequest = {
  id: string;
  RequestBody: CertifyBeneficialOwnershipForCustomerRequestBody;
};

export const CertifyBeneficialOwnershipForCustomerRequest$zodSchema: z.ZodType<
  CertifyBeneficialOwnershipForCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() =>
    CertifyBeneficialOwnershipForCustomerRequestBody$zodSchema
  ),
  id: z.string().describe("Customer unique identifier"),
});

/**
 * forbidden
 */
export type CertifyBeneficialOwnershipForCustomerResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const CertifyBeneficialOwnershipForCustomerResponseBody$zodSchema:
  z.ZodType<
    CertifyBeneficialOwnershipForCustomerResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  }).describe("forbidden");

export type CertifyBeneficialOwnershipForCustomerResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  BeneficialOwnership?: BeneficialOwnership | undefined;
  ValidationErrorSchema?: ValidationErrorSchema | undefined;
  object?: CertifyBeneficialOwnershipForCustomerResponseBody | undefined;
};

export const CertifyBeneficialOwnershipForCustomerResponse$zodSchema: z.ZodType<
  CertifyBeneficialOwnershipForCustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BeneficialOwnership: BeneficialOwnership$zodSchema.optional(),
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  ValidationErrorSchema: ValidationErrorSchema$zodSchema.optional(),
  object: z.lazy(() =>
    CertifyBeneficialOwnershipForCustomerResponseBody$zodSchema
  ).optional(),
});
