/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  FinicitySecureExchangeCreateExchangeRequestBody,
  FinicitySecureExchangeCreateExchangeRequestBody$zodSchema,
} from "../components/finicitysecureexchangecreateexchangerequestbody.js";
import {
  FlinksSecureExchangeCreateExchangeRequestBody,
  FlinksSecureExchangeCreateExchangeRequestBody$zodSchema,
} from "../components/flinkssecureexchangecreateexchangerequestbody.js";
import {
  MXOpenBankingCreateExchangeRequestBody,
  MXOpenBankingCreateExchangeRequestBody$zodSchema,
} from "../components/mxopenbankingcreateexchangerequestbody.js";
import {
  MXSecureExchangeCreateExchangeRequestBody,
  MXSecureExchangeCreateExchangeRequestBody$zodSchema,
} from "../components/mxsecureexchangecreateexchangerequestbody.js";
import {
  NotFoundError,
  NotFoundError$zodSchema,
} from "../components/notfounderror.js";
import {
  PlaidOpenBankingCreateExchangeRequestBody,
  PlaidOpenBankingCreateExchangeRequestBody$zodSchema,
} from "../components/plaidopenbankingcreateexchangerequestbody.js";
import {
  PlaidSecureExchangeCreateExchangeRequestBody,
  PlaidSecureExchangeCreateExchangeRequestBody$zodSchema,
} from "../components/plaidsecureexchangecreateexchangerequestbody.js";
import {
  ValidationErrorSchema,
  ValidationErrorSchema$zodSchema,
} from "../components/validationerrorschema.js";

export type CreateCustomerExchangeRequestBody =
  | FinicitySecureExchangeCreateExchangeRequestBody
  | MXSecureExchangeCreateExchangeRequestBody
  | MXOpenBankingCreateExchangeRequestBody
  | FlinksSecureExchangeCreateExchangeRequestBody
  | PlaidSecureExchangeCreateExchangeRequestBody
  | PlaidOpenBankingCreateExchangeRequestBody;

export const CreateCustomerExchangeRequestBody$zodSchema: z.ZodType<
  CreateCustomerExchangeRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  FinicitySecureExchangeCreateExchangeRequestBody$zodSchema,
  MXSecureExchangeCreateExchangeRequestBody$zodSchema,
  MXOpenBankingCreateExchangeRequestBody$zodSchema,
  FlinksSecureExchangeCreateExchangeRequestBody$zodSchema,
  PlaidSecureExchangeCreateExchangeRequestBody$zodSchema,
  PlaidOpenBankingCreateExchangeRequestBody$zodSchema,
]);

export type CreateCustomerExchangeRequest = {
  id: string;
  RequestBody:
    | FinicitySecureExchangeCreateExchangeRequestBody
    | MXSecureExchangeCreateExchangeRequestBody
    | MXOpenBankingCreateExchangeRequestBody
    | FlinksSecureExchangeCreateExchangeRequestBody
    | PlaidSecureExchangeCreateExchangeRequestBody
    | PlaidOpenBankingCreateExchangeRequestBody;
};

export const CreateCustomerExchangeRequest$zodSchema: z.ZodType<
  CreateCustomerExchangeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.union([
    FinicitySecureExchangeCreateExchangeRequestBody$zodSchema,
    MXSecureExchangeCreateExchangeRequestBody$zodSchema,
    MXOpenBankingCreateExchangeRequestBody$zodSchema,
    FlinksSecureExchangeCreateExchangeRequestBody$zodSchema,
    PlaidSecureExchangeCreateExchangeRequestBody$zodSchema,
    PlaidOpenBankingCreateExchangeRequestBody$zodSchema,
  ]),
  id: z.string().describe("The ID of the customer to create an exchange for"),
});

/**
 * Invalid Scope
 */
export type CreateCustomerExchangeResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const CreateCustomerExchangeResponseBody$zodSchema: z.ZodType<
  CreateCustomerExchangeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("Invalid Scope");

export type CreateCustomerExchangeResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ValidationErrorSchema?: ValidationErrorSchema | undefined;
  object?: CreateCustomerExchangeResponseBody | undefined;
  NotFoundError?: NotFoundError | undefined;
  Headers: { [k: string]: Array<string> };
};

export const CreateCustomerExchangeResponse$zodSchema: z.ZodType<
  CreateCustomerExchangeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  ValidationErrorSchema: ValidationErrorSchema$zodSchema.optional(),
  object: z.lazy(() => CreateCustomerExchangeResponseBody$zodSchema).optional(),
});
