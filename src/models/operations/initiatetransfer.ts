/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  AchAddendaEntriesNotEnabledForAccountError,
  AchAddendaEntriesNotEnabledForAccountError$zodSchema,
} from "../components/achaddendaentriesnotenabledforaccounterror.js";
import {
  CannotParseAmountError,
  CannotParseAmountError$zodSchema,
} from "../components/cannotparseamounterror.js";
import {
  DepositAccountRestrictedError,
  DepositAccountRestrictedError$zodSchema,
} from "../components/depositaccountrestrictederror.js";
import {
  DestinationAddendaMaxLengthError,
  DestinationAddendaMaxLengthError$zodSchema,
} from "../components/destinationaddendamaxlengtherror.js";
import {
  DestinationProcessingChannelNotSupportedError,
  DestinationProcessingChannelNotSupportedError$zodSchema,
} from "../components/destinationprocessingchannelnotsupportederror.js";
import {
  DestinationRemittanceDataMaxLengthError,
  DestinationRemittanceDataMaxLengthError$zodSchema,
} from "../components/destinationremittancedatamaxlengtherror.js";
import {
  DirectAccountWithoutBankError,
  DirectAccountWithoutBankError$zodSchema,
} from "../components/directaccountwithoutbankerror.js";
import {
  FacilitatorFeeAccountNotFoundError,
  FacilitatorFeeAccountNotFoundError$zodSchema,
} from "../components/facilitatorfeeaccountnotfounderror.js";
import {
  FacilitatorFeeBelowMinimumError,
  FacilitatorFeeBelowMinimumError$zodSchema,
} from "../components/facilitatorfeebelowminimumerror.js";
import {
  FacilitatorFeeSumTooLargeError,
  FacilitatorFeeSumTooLargeError$zodSchema,
} from "../components/facilitatorfeesumtoolargeerror.js";
import {
  HighRiskError,
  HighRiskError$zodSchema,
} from "../components/highriskerror.js";
import {
  IncompatibleAddendaEntriesError,
  IncompatibleAddendaEntriesError$zodSchema,
} from "../components/incompatibleaddendaentrieserror.js";
import {
  IncompatibleHoldingsError,
  IncompatibleHoldingsError$zodSchema,
} from "../components/incompatibleholdingserror.js";
import {
  IncompatibleSourceAndDestinationTypesError,
  IncompatibleSourceAndDestinationTypesError$zodSchema,
} from "../components/incompatiblesourceanddestinationtypeserror.js";
import {
  IncompatibleSourceForRtpDestinationError,
  IncompatibleSourceForRtpDestinationError$zodSchema,
} from "../components/incompatiblesourceforrtpdestinationerror.js";
import {
  InsufficientFundsError,
  InsufficientFundsError$zodSchema,
} from "../components/insufficientfundserror.js";
import {
  InvalidAmountForDestinationClearingTypeError,
  InvalidAmountForDestinationClearingTypeError$zodSchema,
} from "../components/invalidamountfordestinationclearingtypeerror.js";
import {
  InvalidAmountForDestinationProcessingChannelError,
  InvalidAmountForDestinationProcessingChannelError$zodSchema,
} from "../components/invalidamountfordestinationprocessingchannelerror.js";
import {
  InvalidAmountLimitError,
  InvalidAmountLimitError$zodSchema,
} from "../components/invalidamountlimiterror.js";
import {
  InvalidAttemptToFacilitateFundsError,
  InvalidAttemptToFacilitateFundsError$zodSchema,
} from "../components/invalidattempttofacilitatefundserror.js";
import {
  InvalidAttemptToPayInFundsError,
  InvalidAttemptToPayInFundsError$zodSchema,
} from "../components/invalidattempttopayinfundserror.js";
import {
  InvalidAttemptToPayOutFundsError,
  InvalidAttemptToPayOutFundsError$zodSchema,
} from "../components/invalidattempttopayoutfundserror.js";
import {
  InvalidCorrelationIdError,
  InvalidCorrelationIdError$zodSchema,
} from "../components/invalidcorrelationiderror.js";
import {
  InvalidDestinationBankAccountTypeError,
  InvalidDestinationBankAccountTypeError$zodSchema,
} from "../components/invaliddestinationbankaccounttypeerror.js";
import {
  InvalidDestinationClearingTypeError,
  InvalidDestinationClearingTypeError$zodSchema,
} from "../components/invaliddestinationclearingtypeerror.js";
import {
  InvalidDestinationFundingSourceError,
  InvalidDestinationFundingSourceError$zodSchema,
} from "../components/invaliddestinationfundingsourceerror.js";
import {
  InvalidFacilitatorError,
  InvalidFacilitatorError$zodSchema,
} from "../components/invalidfacilitatorerror.js";
import {
  InvalidFacilitatorFeeAmountError,
  InvalidFacilitatorFeeAmountError$zodSchema,
} from "../components/invalidfacilitatorfeeamounterror.js";
import {
  InvalidFacilitatorFeeCollectFromCombinationError,
  InvalidFacilitatorFeeCollectFromCombinationError$zodSchema,
} from "../components/invalidfacilitatorfeecollectfromcombinationerror.js";
import {
  InvalidFacilitatorFeeCollectFromError,
  InvalidFacilitatorFeeCollectFromError$zodSchema,
} from "../components/invalidfacilitatorfeecollectfromerror.js";
import {
  InvalidFeeOdfiError,
  InvalidFeeOdfiError$zodSchema,
} from "../components/invalidfeeodfierror.js";
import {
  InvalidMetadataError,
  InvalidMetadataError$zodSchema,
} from "../components/invalidmetadataerror.js";
import {
  InvalidPointOfSaleAddendaAddressError,
  InvalidPointOfSaleAddendaAddressError$zodSchema,
} from "../components/invalidpointofsaleaddendaaddresserror.js";
import {
  InvalidPointOfSaleAddendaCityError,
  InvalidPointOfSaleAddendaCityError$zodSchema,
} from "../components/invalidpointofsaleaddendacityerror.js";
import {
  InvalidPointOfSaleAddendaDateError,
  InvalidPointOfSaleAddendaDateError$zodSchema,
} from "../components/invalidpointofsaleaddendadateerror.js";
import {
  InvalidPointOfSaleAddendaIdentificationCodeError,
  InvalidPointOfSaleAddendaIdentificationCodeError$zodSchema,
} from "../components/invalidpointofsaleaddendaidentificationcodeerror.js";
import {
  InvalidPointOfSaleAddendaSerialNumberError,
  InvalidPointOfSaleAddendaSerialNumberError$zodSchema,
} from "../components/invalidpointofsaleaddendaserialnumbererror.js";
import {
  InvalidPointOfSaleAddendaStateError,
  InvalidPointOfSaleAddendaStateError$zodSchema,
} from "../components/invalidpointofsaleaddendastateerror.js";
import {
  InvalidSourceBankAccountTypeError,
  InvalidSourceBankAccountTypeError$zodSchema,
} from "../components/invalidsourcebankaccounttypeerror.js";
import {
  InvalidSourceFundingSourceError,
  InvalidSourceFundingSourceError$zodSchema,
} from "../components/invalidsourcefundingsourceerror.js";
import {
  OperationBlockedError,
  OperationBlockedError$zodSchema,
} from "../components/operationblockederror.js";
import {
  PointOfSaleAddendaEntriesNotEnabledForAccountError,
  PointOfSaleAddendaEntriesNotEnabledForAccountError$zodSchema,
} from "../components/pointofsaleaddendaentriesnotenabledforaccounterror.js";
import {
  ReceiverNotFoundError,
  ReceiverNotFoundError$zodSchema,
} from "../components/receivernotfounderror.js";
import {
  ReceiverRestrictedError,
  ReceiverRestrictedError$zodSchema,
} from "../components/receiverrestrictederror.js";
import {
  RtpAccountSettingNotEnabledError,
  RtpAccountSettingNotEnabledError$zodSchema,
} from "../components/rtpaccountsettingnotenablederror.js";
import {
  RtpFacilitatorFeeNotSupportedError,
  RtpFacilitatorFeeNotSupportedError$zodSchema,
} from "../components/rtpfacilitatorfeenotsupportederror.js";
import {
  RtpPersonalToPersonalNotSupportedError,
  RtpPersonalToPersonalNotSupportedError$zodSchema,
} from "../components/rtppersonaltopersonalnotsupportederror.js";
import {
  RtpUnverifiedSenderNotSupportedError,
  RtpUnverifiedSenderNotSupportedError$zodSchema,
} from "../components/rtpunverifiedsendernotsupportederror.js";
import {
  SenderRestrictedError,
  SenderRestrictedError$zodSchema,
} from "../components/senderrestrictederror.js";
import {
  SourceAddendaMaxLengthError,
  SourceAddendaMaxLengthError$zodSchema,
} from "../components/sourceaddendamaxlengtherror.js";
import {
  SourceNotFoundError,
  SourceNotFoundError$zodSchema,
} from "../components/sourcenotfounderror.js";
import {
  SourceSameAsDestinationError,
  SourceSameAsDestinationError$zodSchema,
} from "../components/sourcesameasdestinationerror.js";
import {
  TooManyRequestsErrorError,
  TooManyRequestsErrorError$zodSchema,
} from "../components/toomanyrequestserrorerror.js";
import {
  TransferAmount,
  TransferAmount$zodSchema,
} from "../components/transferamount.js";
import {
  TransferExpiredForFeeError,
  TransferExpiredForFeeError$zodSchema,
} from "../components/transferexpiredforfeeerror.js";
import {
  WeeklyReceiveLimitReachedError,
  WeeklyReceiveLimitReachedError$zodSchema,
} from "../components/weeklyreceivelimitreachederror.js";
import {
  WireAccountNotFoundError,
  WireAccountNotFoundError$zodSchema,
} from "../components/wireaccountnotfounderror.js";
import {
  WireAccountRestrictedError,
  WireAccountRestrictedError$zodSchema,
} from "../components/wireaccountrestrictederror.js";
import {
  WireInvalidImadError,
  WireInvalidImadError$zodSchema,
} from "../components/wireinvalidimaderror.js";
import {
  WireNotEnabledError,
  WireNotEnabledError$zodSchema,
} from "../components/wirenotenablederror.js";
import {
  WithdrawAccountRestrictedError,
  WithdrawAccountRestrictedError$zodSchema,
} from "../components/withdrawaccountrestrictederror.js";
import {
  WithdrawInvalidAmountError,
  WithdrawInvalidAmountError$zodSchema,
} from "../components/withdrawinvalidamounterror.js";
import {
  WithdrawInvalidAmountForClearingTypeError,
  WithdrawInvalidAmountForClearingTypeError$zodSchema,
} from "../components/withdrawinvalidamountforclearingtypeerror.js";
import {
  WithdrawInvalidFundingSourceError,
  WithdrawInvalidFundingSourceError$zodSchema,
} from "../components/withdrawinvalidfundingsourceerror.js";
import {
  WithdrawInvalidWireBeneficiaryCountryError,
  WithdrawInvalidWireBeneficiaryCountryError$zodSchema,
} from "../components/withdrawinvalidwirebeneficiarycountryerror.js";
import {
  WithdrawInvalidWireBeneficiaryLocalityError,
  WithdrawInvalidWireBeneficiaryLocalityError$zodSchema,
} from "../components/withdrawinvalidwirebeneficiarylocalityerror.js";
import {
  WithdrawInvalidWireBeneficiaryRegionError,
  WithdrawInvalidWireBeneficiaryRegionError$zodSchema,
} from "../components/withdrawinvalidwirebeneficiaryregionerror.js";
import {
  WithdrawInvalidWireOriginatorToBeneficiaryError,
  WithdrawInvalidWireOriginatorToBeneficiaryError$zodSchema,
} from "../components/withdrawinvalidwireoriginatortobeneficiaryerror.js";
import {
  WithdrawProcessingChannelNotSupportedError,
  WithdrawProcessingChannelNotSupportedError$zodSchema,
} from "../components/withdrawprocessingchannelnotsupportederror.js";
import {
  WithdrawRtpPersonalWithdrawalNotSupportedError,
  WithdrawRtpPersonalWithdrawalNotSupportedError$zodSchema,
} from "../components/withdrawrtppersonalwithdrawalnotsupportederror.js";
import {
  WithdrawRtpUnverifiedSenderNotSupportedError,
  WithdrawRtpUnverifiedSenderNotSupportedError$zodSchema,
} from "../components/withdrawrtpunverifiedsendernotsupportederror.js";

export type InitiateTransferLinksSource = { href?: string | undefined };

export const InitiateTransferLinksSource$zodSchema: z.ZodType<
  InitiateTransferLinksSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

export type InitiateTransferLinksDestination = { href?: string | undefined };

export const InitiateTransferLinksDestination$zodSchema: z.ZodType<
  InitiateTransferLinksDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
});

export type InitiateTransferLinks = {
  source?: InitiateTransferLinksSource | undefined;
  destination?: InitiateTransferLinksDestination | undefined;
};

export const InitiateTransferLinks$zodSchema: z.ZodType<
  InitiateTransferLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.lazy(() => InitiateTransferLinksDestination$zodSchema)
    .optional(),
  source: z.lazy(() => InitiateTransferLinksSource$zodSchema).optional(),
});

export type InitiateTransferMetadata = {};

export const InitiateTransferMetadata$zodSchema: z.ZodType<
  InitiateTransferMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

export type ChargeTo = { href?: string | undefined };

export const ChargeTo$zodSchema: z.ZodType<ChargeTo, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string().optional(),
  });

export type FeeLinks = { chargeTo?: ChargeTo | undefined };

export const FeeLinks$zodSchema: z.ZodType<FeeLinks, z.ZodTypeDef, unknown> = z
  .object({
    chargeTo: z.lazy(() => ChargeTo$zodSchema).optional(),
  });

export type InitiateTransferAmount = {
  amount?: string | undefined;
  currency?: string | undefined;
};

export const InitiateTransferAmount$zodSchema: z.ZodType<
  InitiateTransferAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.string().optional(),
  currency: z.string().optional(),
});

export type Fee = {
  _links?: FeeLinks | undefined;
  amount?: InitiateTransferAmount | undefined;
};

export const Fee$zodSchema: z.ZodType<Fee, z.ZodTypeDef, unknown> = z.object({
  _links: z.lazy(() => FeeLinks$zodSchema).optional(),
  amount: z.lazy(() => InitiateTransferAmount$zodSchema).optional(),
});

export type InitiateTransferClearing = {
  source?: string | undefined;
  destination?: string | undefined;
};

export const InitiateTransferClearing$zodSchema: z.ZodType<
  InitiateTransferClearing,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.string().optional(),
  source: z.string().optional(),
});

export type InitiateTransferSourceAddenda = {
  values?: Array<string> | undefined;
};

export const InitiateTransferSourceAddenda$zodSchema: z.ZodType<
  InitiateTransferSourceAddenda,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(z.string()).optional(),
});

export type InitiateTransferAchDetailsSource = {
  addenda?: InitiateTransferSourceAddenda | undefined;
};

export const InitiateTransferAchDetailsSource$zodSchema: z.ZodType<
  InitiateTransferAchDetailsSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  addenda: z.lazy(() => InitiateTransferSourceAddenda$zodSchema).optional(),
});

export type InitiateTransferDestinationAddenda = {
  values?: Array<string> | undefined;
};

export const InitiateTransferDestinationAddenda$zodSchema: z.ZodType<
  InitiateTransferDestinationAddenda,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(z.string()).optional(),
});

export type InitiateTransferAchDetailsDestination = {
  addenda?: InitiateTransferDestinationAddenda | undefined;
};

export const InitiateTransferAchDetailsDestination$zodSchema: z.ZodType<
  InitiateTransferAchDetailsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  addenda: z.lazy(() => InitiateTransferDestinationAddenda$zodSchema)
    .optional(),
});

export type InitiateTransferAchDetails = {
  source?: InitiateTransferAchDetailsSource | undefined;
  destination?: InitiateTransferAchDetailsDestination | undefined;
};

export const InitiateTransferAchDetails$zodSchema: z.ZodType<
  InitiateTransferAchDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.lazy(() => InitiateTransferAchDetailsDestination$zodSchema)
    .optional(),
  source: z.lazy(() => InitiateTransferAchDetailsSource$zodSchema).optional(),
});

export type RtpDetailsDestination = { remittanceData?: string | undefined };

export const RtpDetailsDestination$zodSchema: z.ZodType<
  RtpDetailsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  remittanceData: z.string().optional(),
});

export type RtpDetails = { destination?: RtpDetailsDestination | undefined };

export const RtpDetails$zodSchema: z.ZodType<
  RtpDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.lazy(() => RtpDetailsDestination$zodSchema).optional(),
});

export type InitiateTransferProcessingChannel = {
  destination?: string | undefined;
};

export const InitiateTransferProcessingChannel$zodSchema: z.ZodType<
  InitiateTransferProcessingChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.string().optional(),
});

/**
 * Parameters to initiate a transfer
 */
export type InitiateTransferRequest = {
  _links: InitiateTransferLinks;
  amount: TransferAmount;
  metadata?: InitiateTransferMetadata | undefined;
  fees?: Array<Fee> | undefined;
  clearing?: InitiateTransferClearing | undefined;
  achDetails?: InitiateTransferAchDetails | undefined;
  rtpDetails?: RtpDetails | undefined;
  correlationId?: string | undefined;
  processingChannel?: InitiateTransferProcessingChannel | undefined;
};

export const InitiateTransferRequest$zodSchema: z.ZodType<
  InitiateTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => InitiateTransferLinks$zodSchema),
  achDetails: z.lazy(() => InitiateTransferAchDetails$zodSchema).optional(),
  amount: TransferAmount$zodSchema,
  clearing: z.lazy(() => InitiateTransferClearing$zodSchema).optional(),
  correlationId: z.string().optional(),
  fees: z.array(z.lazy(() => Fee$zodSchema)).optional(),
  metadata: z.lazy(() => InitiateTransferMetadata$zodSchema).optional(),
  processingChannel: z.lazy(() => InitiateTransferProcessingChannel$zodSchema)
    .optional(),
  rtpDetails: z.lazy(() => RtpDetails$zodSchema).optional(),
}).describe("Parameters to initiate a transfer");

/**
 * Forbidden
 */
export type InitiateTransferForbiddenResponseBody =
  | InvalidAttemptToFacilitateFundsError
  | InvalidAttemptToPayInFundsError
  | InvalidAttemptToPayOutFundsError
  | RtpAccountSettingNotEnabledError;

export const InitiateTransferForbiddenResponseBody$zodSchema: z.ZodType<
  InitiateTransferForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  InvalidAttemptToFacilitateFundsError$zodSchema,
  InvalidAttemptToPayInFundsError$zodSchema,
  InvalidAttemptToPayOutFundsError$zodSchema,
  RtpAccountSettingNotEnabledError$zodSchema,
]).describe("Forbidden");

/**
 * Bad Request
 */
export type InitiateTransferBadRequestResponseBody =
  | SourceNotFoundError
  | ReceiverNotFoundError
  | InvalidSourceFundingSourceError
  | SenderRestrictedError
  | ReceiverRestrictedError
  | InvalidMetadataError
  | OperationBlockedError
  | InvalidAmountLimitError
  | CannotParseAmountError
  | InsufficientFundsError
  | FacilitatorFeeAccountNotFoundError
  | FacilitatorFeeSumTooLargeError
  | FacilitatorFeeBelowMinimumError
  | HighRiskError
  | IncompatibleHoldingsError
  | DirectAccountWithoutBankError
  | SourceSameAsDestinationError
  | InvalidFacilitatorError
  | InvalidFacilitatorFeeCollectFromError
  | InvalidFacilitatorFeeCollectFromCombinationError
  | InvalidDestinationFundingSourceError
  | InvalidFacilitatorFeeAmountError
  | WeeklyReceiveLimitReachedError
  | InvalidDestinationClearingTypeError
  | InvalidAmountForDestinationClearingTypeError
  | InvalidCorrelationIdError
  | SourceAddendaMaxLengthError
  | DestinationAddendaMaxLengthError
  | AchAddendaEntriesNotEnabledForAccountError
  | PointOfSaleAddendaEntriesNotEnabledForAccountError
  | IncompatibleAddendaEntriesError
  | InvalidPointOfSaleAddendaIdentificationCodeError
  | InvalidPointOfSaleAddendaSerialNumberError
  | InvalidPointOfSaleAddendaDateError
  | InvalidPointOfSaleAddendaAddressError
  | InvalidPointOfSaleAddendaCityError
  | InvalidPointOfSaleAddendaStateError
  | TransferExpiredForFeeError
  | InvalidFeeOdfiError
  | InvalidSourceBankAccountTypeError
  | InvalidDestinationBankAccountTypeError
  | IncompatibleSourceAndDestinationTypesError
  | IncompatibleSourceForRtpDestinationError
  | InvalidAmountForDestinationProcessingChannelError
  | RtpFacilitatorFeeNotSupportedError
  | RtpUnverifiedSenderNotSupportedError
  | RtpPersonalToPersonalNotSupportedError
  | DestinationProcessingChannelNotSupportedError
  | DestinationRemittanceDataMaxLengthError
  | WithdrawInvalidAmountError
  | WithdrawInvalidFundingSourceError
  | WithdrawAccountRestrictedError
  | WithdrawInvalidAmountForClearingTypeError
  | WithdrawInvalidWireBeneficiaryLocalityError
  | WithdrawInvalidWireBeneficiaryRegionError
  | WithdrawInvalidWireBeneficiaryCountryError
  | WithdrawInvalidWireOriginatorToBeneficiaryError
  | WithdrawProcessingChannelNotSupportedError
  | WithdrawRtpUnverifiedSenderNotSupportedError
  | WithdrawRtpPersonalWithdrawalNotSupportedError
  | DepositAccountRestrictedError
  | WireInvalidImadError
  | WireAccountRestrictedError
  | WireNotEnabledError
  | WireAccountNotFoundError;

export const InitiateTransferBadRequestResponseBody$zodSchema: z.ZodType<
  InitiateTransferBadRequestResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  SourceNotFoundError$zodSchema,
  ReceiverNotFoundError$zodSchema,
  InvalidSourceFundingSourceError$zodSchema,
  SenderRestrictedError$zodSchema,
  ReceiverRestrictedError$zodSchema,
  InvalidMetadataError$zodSchema,
  OperationBlockedError$zodSchema,
  InvalidAmountLimitError$zodSchema,
  CannotParseAmountError$zodSchema,
  InsufficientFundsError$zodSchema,
  FacilitatorFeeAccountNotFoundError$zodSchema,
  FacilitatorFeeSumTooLargeError$zodSchema,
  FacilitatorFeeBelowMinimumError$zodSchema,
  HighRiskError$zodSchema,
  IncompatibleHoldingsError$zodSchema,
  DirectAccountWithoutBankError$zodSchema,
  SourceSameAsDestinationError$zodSchema,
  InvalidFacilitatorError$zodSchema,
  InvalidFacilitatorFeeCollectFromError$zodSchema,
  InvalidFacilitatorFeeCollectFromCombinationError$zodSchema,
  InvalidDestinationFundingSourceError$zodSchema,
  InvalidFacilitatorFeeAmountError$zodSchema,
  WeeklyReceiveLimitReachedError$zodSchema,
  InvalidDestinationClearingTypeError$zodSchema,
  InvalidAmountForDestinationClearingTypeError$zodSchema,
  InvalidCorrelationIdError$zodSchema,
  SourceAddendaMaxLengthError$zodSchema,
  DestinationAddendaMaxLengthError$zodSchema,
  AchAddendaEntriesNotEnabledForAccountError$zodSchema,
  PointOfSaleAddendaEntriesNotEnabledForAccountError$zodSchema,
  IncompatibleAddendaEntriesError$zodSchema,
  InvalidPointOfSaleAddendaIdentificationCodeError$zodSchema,
  InvalidPointOfSaleAddendaSerialNumberError$zodSchema,
  InvalidPointOfSaleAddendaDateError$zodSchema,
  InvalidPointOfSaleAddendaAddressError$zodSchema,
  InvalidPointOfSaleAddendaCityError$zodSchema,
  InvalidPointOfSaleAddendaStateError$zodSchema,
  TransferExpiredForFeeError$zodSchema,
  InvalidFeeOdfiError$zodSchema,
  InvalidSourceBankAccountTypeError$zodSchema,
  InvalidDestinationBankAccountTypeError$zodSchema,
  IncompatibleSourceAndDestinationTypesError$zodSchema,
  IncompatibleSourceForRtpDestinationError$zodSchema,
  InvalidAmountForDestinationProcessingChannelError$zodSchema,
  RtpFacilitatorFeeNotSupportedError$zodSchema,
  RtpUnverifiedSenderNotSupportedError$zodSchema,
  RtpPersonalToPersonalNotSupportedError$zodSchema,
  DestinationProcessingChannelNotSupportedError$zodSchema,
  DestinationRemittanceDataMaxLengthError$zodSchema,
  WithdrawInvalidAmountError$zodSchema,
  WithdrawInvalidFundingSourceError$zodSchema,
  WithdrawAccountRestrictedError$zodSchema,
  WithdrawInvalidAmountForClearingTypeError$zodSchema,
  WithdrawInvalidWireBeneficiaryLocalityError$zodSchema,
  WithdrawInvalidWireBeneficiaryRegionError$zodSchema,
  WithdrawInvalidWireBeneficiaryCountryError$zodSchema,
  WithdrawInvalidWireOriginatorToBeneficiaryError$zodSchema,
  WithdrawProcessingChannelNotSupportedError$zodSchema,
  WithdrawRtpUnverifiedSenderNotSupportedError$zodSchema,
  WithdrawRtpPersonalWithdrawalNotSupportedError$zodSchema,
  DepositAccountRestrictedError$zodSchema,
  WireInvalidImadError$zodSchema,
  WireAccountRestrictedError$zodSchema,
  WireNotEnabledError$zodSchema,
  WireAccountNotFoundError$zodSchema,
]).describe("Bad Request");

export type InitiateTransferResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  fourHundredApplicationVndDwollaV1HalPlusJsonOneOf?:
    | SourceNotFoundError
    | ReceiverNotFoundError
    | InvalidSourceFundingSourceError
    | SenderRestrictedError
    | ReceiverRestrictedError
    | InvalidMetadataError
    | OperationBlockedError
    | InvalidAmountLimitError
    | CannotParseAmountError
    | InsufficientFundsError
    | FacilitatorFeeAccountNotFoundError
    | FacilitatorFeeSumTooLargeError
    | FacilitatorFeeBelowMinimumError
    | HighRiskError
    | IncompatibleHoldingsError
    | DirectAccountWithoutBankError
    | SourceSameAsDestinationError
    | InvalidFacilitatorError
    | InvalidFacilitatorFeeCollectFromError
    | InvalidFacilitatorFeeCollectFromCombinationError
    | InvalidDestinationFundingSourceError
    | InvalidFacilitatorFeeAmountError
    | WeeklyReceiveLimitReachedError
    | InvalidDestinationClearingTypeError
    | InvalidAmountForDestinationClearingTypeError
    | InvalidCorrelationIdError
    | SourceAddendaMaxLengthError
    | DestinationAddendaMaxLengthError
    | AchAddendaEntriesNotEnabledForAccountError
    | PointOfSaleAddendaEntriesNotEnabledForAccountError
    | IncompatibleAddendaEntriesError
    | InvalidPointOfSaleAddendaIdentificationCodeError
    | InvalidPointOfSaleAddendaSerialNumberError
    | InvalidPointOfSaleAddendaDateError
    | InvalidPointOfSaleAddendaAddressError
    | InvalidPointOfSaleAddendaCityError
    | InvalidPointOfSaleAddendaStateError
    | TransferExpiredForFeeError
    | InvalidFeeOdfiError
    | InvalidSourceBankAccountTypeError
    | InvalidDestinationBankAccountTypeError
    | IncompatibleSourceAndDestinationTypesError
    | IncompatibleSourceForRtpDestinationError
    | InvalidAmountForDestinationProcessingChannelError
    | RtpFacilitatorFeeNotSupportedError
    | RtpUnverifiedSenderNotSupportedError
    | RtpPersonalToPersonalNotSupportedError
    | DestinationProcessingChannelNotSupportedError
    | DestinationRemittanceDataMaxLengthError
    | WithdrawInvalidAmountError
    | WithdrawInvalidFundingSourceError
    | WithdrawAccountRestrictedError
    | WithdrawInvalidAmountForClearingTypeError
    | WithdrawInvalidWireBeneficiaryLocalityError
    | WithdrawInvalidWireBeneficiaryRegionError
    | WithdrawInvalidWireBeneficiaryCountryError
    | WithdrawInvalidWireOriginatorToBeneficiaryError
    | WithdrawProcessingChannelNotSupportedError
    | WithdrawRtpUnverifiedSenderNotSupportedError
    | WithdrawRtpPersonalWithdrawalNotSupportedError
    | DepositAccountRestrictedError
    | WireInvalidImadError
    | WireAccountRestrictedError
    | WireNotEnabledError
    | WireAccountNotFoundError
    | undefined;
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonOneOf?:
    | InvalidAttemptToFacilitateFundsError
    | InvalidAttemptToPayInFundsError
    | InvalidAttemptToPayOutFundsError
    | RtpAccountSettingNotEnabledError
    | undefined;
  TooManyRequestsErrorError?: TooManyRequestsErrorError | undefined;
  Headers: { [k: string]: Array<string> };
};

export const InitiateTransferResponse$zodSchema: z.ZodType<
  InitiateTransferResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  TooManyRequestsErrorError: TooManyRequestsErrorError$zodSchema.optional(),
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonOneOf: z.union([
    InvalidAttemptToFacilitateFundsError$zodSchema,
    InvalidAttemptToPayInFundsError$zodSchema,
    InvalidAttemptToPayOutFundsError$zodSchema,
    RtpAccountSettingNotEnabledError$zodSchema,
  ]).optional(),
  fourHundredApplicationVndDwollaV1HalPlusJsonOneOf: z.union([
    SourceNotFoundError$zodSchema,
    ReceiverNotFoundError$zodSchema,
    InvalidSourceFundingSourceError$zodSchema,
    SenderRestrictedError$zodSchema,
    ReceiverRestrictedError$zodSchema,
    InvalidMetadataError$zodSchema,
    OperationBlockedError$zodSchema,
    InvalidAmountLimitError$zodSchema,
    CannotParseAmountError$zodSchema,
    InsufficientFundsError$zodSchema,
    FacilitatorFeeAccountNotFoundError$zodSchema,
    FacilitatorFeeSumTooLargeError$zodSchema,
    FacilitatorFeeBelowMinimumError$zodSchema,
    HighRiskError$zodSchema,
    IncompatibleHoldingsError$zodSchema,
    DirectAccountWithoutBankError$zodSchema,
    SourceSameAsDestinationError$zodSchema,
    InvalidFacilitatorError$zodSchema,
    InvalidFacilitatorFeeCollectFromError$zodSchema,
    InvalidFacilitatorFeeCollectFromCombinationError$zodSchema,
    InvalidDestinationFundingSourceError$zodSchema,
    InvalidFacilitatorFeeAmountError$zodSchema,
    WeeklyReceiveLimitReachedError$zodSchema,
    InvalidDestinationClearingTypeError$zodSchema,
    InvalidAmountForDestinationClearingTypeError$zodSchema,
    InvalidCorrelationIdError$zodSchema,
    SourceAddendaMaxLengthError$zodSchema,
    DestinationAddendaMaxLengthError$zodSchema,
    AchAddendaEntriesNotEnabledForAccountError$zodSchema,
    PointOfSaleAddendaEntriesNotEnabledForAccountError$zodSchema,
    IncompatibleAddendaEntriesError$zodSchema,
    InvalidPointOfSaleAddendaIdentificationCodeError$zodSchema,
    InvalidPointOfSaleAddendaSerialNumberError$zodSchema,
    InvalidPointOfSaleAddendaDateError$zodSchema,
    InvalidPointOfSaleAddendaAddressError$zodSchema,
    InvalidPointOfSaleAddendaCityError$zodSchema,
    InvalidPointOfSaleAddendaStateError$zodSchema,
    TransferExpiredForFeeError$zodSchema,
    InvalidFeeOdfiError$zodSchema,
    InvalidSourceBankAccountTypeError$zodSchema,
    InvalidDestinationBankAccountTypeError$zodSchema,
    IncompatibleSourceAndDestinationTypesError$zodSchema,
    IncompatibleSourceForRtpDestinationError$zodSchema,
    InvalidAmountForDestinationProcessingChannelError$zodSchema,
    RtpFacilitatorFeeNotSupportedError$zodSchema,
    RtpUnverifiedSenderNotSupportedError$zodSchema,
    RtpPersonalToPersonalNotSupportedError$zodSchema,
    DestinationProcessingChannelNotSupportedError$zodSchema,
    DestinationRemittanceDataMaxLengthError$zodSchema,
    WithdrawInvalidAmountError$zodSchema,
    WithdrawInvalidFundingSourceError$zodSchema,
    WithdrawAccountRestrictedError$zodSchema,
    WithdrawInvalidAmountForClearingTypeError$zodSchema,
    WithdrawInvalidWireBeneficiaryLocalityError$zodSchema,
    WithdrawInvalidWireBeneficiaryRegionError$zodSchema,
    WithdrawInvalidWireBeneficiaryCountryError$zodSchema,
    WithdrawInvalidWireOriginatorToBeneficiaryError$zodSchema,
    WithdrawProcessingChannelNotSupportedError$zodSchema,
    WithdrawRtpUnverifiedSenderNotSupportedError$zodSchema,
    WithdrawRtpPersonalWithdrawalNotSupportedError$zodSchema,
    DepositAccountRestrictedError$zodSchema,
    WireInvalidImadError$zodSchema,
    WireAccountRestrictedError$zodSchema,
    WireNotEnabledError$zodSchema,
    WireAccountNotFoundError$zodSchema,
  ]).optional(),
});
