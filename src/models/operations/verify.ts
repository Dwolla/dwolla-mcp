/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ExpiredKbaSessionError,
  ExpiredKbaSessionError$zodSchema,
} from "../components/expiredkbasessionerror.js";
import {
  ForbiddenError,
  ForbiddenError$zodSchema,
} from "../components/forbiddenerror.js";
import {
  InvalidKbaSessionError,
  InvalidKbaSessionError$zodSchema,
} from "../components/invalidkbasessionerror.js";

export type VerifyAnswer = {
  questionId?: string | undefined;
  answerId?: string | undefined;
};

export const VerifyAnswer$zodSchema: z.ZodType<
  VerifyAnswer,
  z.ZodTypeDef,
  unknown
> = z.object({
  answerId: z.string().optional(),
  questionId: z.string().optional(),
});

/**
 * Parameters for verifying KBA questions
 */
export type VerifyRequestBody = { answers: Array<VerifyAnswer> };

export const VerifyRequestBody$zodSchema: z.ZodType<
  VerifyRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  answers: z.array(z.lazy(() => VerifyAnswer$zodSchema)),
}).describe("Parameters for verifying KBA questions");

export type VerifyRequest = { id: string; RequestBody: VerifyRequestBody };

export const VerifyRequest$zodSchema: z.ZodType<
  VerifyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => VerifyRequestBody$zodSchema),
  id: z.string().describe("The id of the KBA session to verify questions for."),
});

/**
 * 404 Error
 */
export type VerifyNotFoundResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const VerifyNotFoundResponseBody$zodSchema: z.ZodType<
  VerifyNotFoundResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("404 Error");

/**
 * 403 Error
 */
export type VerifyResponseBodyUnion =
  | ForbiddenError
  | InvalidKbaSessionError
  | ExpiredKbaSessionError;

export const VerifyResponseBodyUnion$zodSchema: z.ZodType<
  VerifyResponseBodyUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  ForbiddenError$zodSchema,
  InvalidKbaSessionError$zodSchema,
  ExpiredKbaSessionError$zodSchema,
]).describe("403 Error");

export type VerifyCustomer = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export const VerifyCustomer$zodSchema: z.ZodType<
  VerifyCustomer,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  resourceType: z.string().optional(),
  type: z.string().optional(),
});

export type VerifyLinks = { customer?: VerifyCustomer | undefined };

export const VerifyLinks$zodSchema: z.ZodType<
  VerifyLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer: z.lazy(() => VerifyCustomer$zodSchema).optional(),
});

/**
 * created
 */
export type VerifyResponseBody = {
  _links?: VerifyLinks | undefined;
  verificationStatus?: string | undefined;
};

export const VerifyResponseBody$zodSchema: z.ZodType<
  VerifyResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => VerifyLinks$zodSchema).optional(),
  verificationStatus: z.string().optional(),
}).describe("created");

export type VerifyResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  twoHundredApplicationVndDwollaV1HalPlusJsonObject?:
    | VerifyResponseBody
    | undefined;
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonOneOf?:
    | ForbiddenError
    | InvalidKbaSessionError
    | ExpiredKbaSessionError
    | undefined;
  fourHundredAndFourApplicationVndDwollaV1HalPlusJsonObject?:
    | VerifyNotFoundResponseBody
    | undefined;
};

export const VerifyResponse$zodSchema: z.ZodType<
  VerifyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndFourApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    VerifyNotFoundResponseBody$zodSchema
  ).optional(),
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonOneOf: z.union([
    ForbiddenError$zodSchema,
    InvalidKbaSessionError$zodSchema,
    ExpiredKbaSessionError$zodSchema,
  ]).optional(),
  twoHundredApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    VerifyResponseBody$zodSchema
  ).optional(),
});
