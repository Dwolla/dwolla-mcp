/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ForbiddenError,
  ForbiddenError$zodSchema,
} from "../components/forbiddenerror.js";
import {
  InvalidUrlFormatError,
  InvalidUrlFormatError$zodSchema,
} from "../components/invalidurlformaterror.js";
import {
  MaxSubscriptionsReachedError,
  MaxSubscriptionsReachedError$zodSchema,
} from "../components/maxsubscriptionsreachederror.js";
import {
  NotFoundError,
  NotFoundError$zodSchema,
} from "../components/notfounderror.js";
import {
  SecretTooLongError,
  SecretTooLongError$zodSchema,
} from "../components/secrettoolongerror.js";

/**
 * Parameters to create a webhook subscriptions
 */
export type CreateWebhookSubscriptionRequest = { url: string; secret: string };

export const CreateWebhookSubscriptionRequest$zodSchema: z.ZodType<
  CreateWebhookSubscriptionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  secret: z.string(),
  url: z.string(),
}).describe("Parameters to create a webhook subscriptions");

/**
 * Bad request
 */
export type CreateWebhookSubscriptionResponseBody =
  | MaxSubscriptionsReachedError
  | InvalidUrlFormatError
  | SecretTooLongError;

export const CreateWebhookSubscriptionResponseBody$zodSchema: z.ZodType<
  CreateWebhookSubscriptionResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  MaxSubscriptionsReachedError$zodSchema,
  InvalidUrlFormatError$zodSchema,
  SecretTooLongError$zodSchema,
]).describe("Bad request");

export type CreateWebhookSubscriptionResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  oneOf?:
    | MaxSubscriptionsReachedError
    | InvalidUrlFormatError
    | SecretTooLongError
    | undefined;
  ForbiddenError?: ForbiddenError | undefined;
  NotFoundError?: NotFoundError | undefined;
  Body?: Uint8Array | string | undefined;
  Headers: { [k: string]: Array<string> };
};

export const CreateWebhookSubscriptionResponse$zodSchema: z.ZodType<
  CreateWebhookSubscriptionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Body: z.string().base64().optional(),
  ContentType: z.string(),
  ForbiddenError: ForbiddenError$zodSchema.optional(),
  Headers: z.record(z.array(z.string())),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  oneOf: z.union([
    MaxSubscriptionsReachedError$zodSchema,
    InvalidUrlFormatError$zodSchema,
    SecretTooLongError$zodSchema,
  ]).optional(),
});
