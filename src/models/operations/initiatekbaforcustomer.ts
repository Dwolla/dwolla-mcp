/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  ForbiddenError,
  ForbiddenError$zodSchema,
} from "../components/forbiddenerror.js";
import {
  InvalidResourceStateSchema,
  InvalidResourceStateSchema$zodSchema,
} from "../components/invalidresourcestateschema.js";
import {
  NotFoundError,
  NotFoundError$zodSchema,
} from "../components/notfounderror.js";

export type InitiateKbaForCustomerRequest = { id: string };

export const InitiateKbaForCustomerRequest$zodSchema: z.ZodType<
  InitiateKbaForCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().describe(
    "The ID of the Customer for initiating a KBA session",
  ),
});

/**
 * 403 Error
 */
export type InitiateKbaForCustomerResponseBody =
  | InvalidResourceStateSchema
  | ForbiddenError;

export const InitiateKbaForCustomerResponseBody$zodSchema: z.ZodType<
  InitiateKbaForCustomerResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  InvalidResourceStateSchema$zodSchema,
  ForbiddenError$zodSchema,
]).describe("403 Error");

export type InitiateKbaForCustomerResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  oneOf?: InvalidResourceStateSchema | ForbiddenError | undefined;
  NotFoundError?: NotFoundError | undefined;
  Headers: { [k: string]: Array<string> };
};

export const InitiateKbaForCustomerResponse$zodSchema: z.ZodType<
  InitiateKbaForCustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  oneOf: z.union([
    InvalidResourceStateSchema$zodSchema,
    ForbiddenError$zodSchema,
  ]).optional(),
});
