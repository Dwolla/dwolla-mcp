/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { RemoveBank, RemoveBank$zodSchema } from "../components/removebank.js";
import {
  UpdateUnverifiedBank,
  UpdateUnverifiedBank$zodSchema,
} from "../components/updateunverifiedbank.js";
import {
  UpdateVerifiedBank,
  UpdateVerifiedBank$zodSchema,
} from "../components/updateverifiedbank.js";

/**
 * Parameters to update a customer funding source
 */
export type UpdateOrRemoveFundingSourceRequestBody =
  | UpdateVerifiedBank
  | RemoveBank
  | UpdateUnverifiedBank;

export const UpdateOrRemoveFundingSourceRequestBody$zodSchema: z.ZodType<
  UpdateOrRemoveFundingSourceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  UpdateVerifiedBank$zodSchema,
  RemoveBank$zodSchema,
  UpdateUnverifiedBank$zodSchema,
]).describe("Parameters to update a customer funding source");

export type UpdateOrRemoveFundingSourceRequest = {
  id: string;
  RequestBody: UpdateVerifiedBank | RemoveBank | UpdateUnverifiedBank;
};

export const UpdateOrRemoveFundingSourceRequest$zodSchema: z.ZodType<
  UpdateOrRemoveFundingSourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.union([
    UpdateVerifiedBank$zodSchema,
    RemoveBank$zodSchema,
    UpdateUnverifiedBank$zodSchema,
  ]),
  id: z.string().describe("Funding source unique identifier"),
});

/**
 * forbidden
 */
export type UpdateOrRemoveFundingSourceForbiddenResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const UpdateOrRemoveFundingSourceForbiddenResponseBody$zodSchema:
  z.ZodType<
    UpdateOrRemoveFundingSourceForbiddenResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  }).describe("forbidden");

/**
 * validation error
 */
export type UpdateOrRemoveFundingSourceBadRequestResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const UpdateOrRemoveFundingSourceBadRequestResponseBody$zodSchema:
  z.ZodType<
    UpdateOrRemoveFundingSourceBadRequestResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  }).describe("validation error");

/**
 * successful operation
 */
export type UpdateOrRemoveFundingSourceResponseBody = {};

export const UpdateOrRemoveFundingSourceResponseBody$zodSchema: z.ZodType<
  UpdateOrRemoveFundingSourceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({}).describe("successful operation");

export type UpdateOrRemoveFundingSourceResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  twoHundredApplicationVndDwollaV1HalPlusJsonObject?:
    | UpdateOrRemoveFundingSourceResponseBody
    | undefined;
  fourHundredApplicationVndDwollaV1HalPlusJsonObject?:
    | UpdateOrRemoveFundingSourceBadRequestResponseBody
    | undefined;
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonObject?:
    | UpdateOrRemoveFundingSourceForbiddenResponseBody
    | undefined;
};

export const UpdateOrRemoveFundingSourceResponse$zodSchema: z.ZodType<
  UpdateOrRemoveFundingSourceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    UpdateOrRemoveFundingSourceForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    UpdateOrRemoveFundingSourceBadRequestResponseBody$zodSchema
  ).optional(),
  twoHundredApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    UpdateOrRemoveFundingSourceResponseBody$zodSchema
  ).optional(),
});
