/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Customer, Customer$zodSchema } from "../components/customer.js";
import {
  DeactivateCustomer,
  DeactivateCustomer$zodSchema,
} from "../components/deactivatecustomer.js";
import {
  ReactivateCustomer,
  ReactivateCustomer$zodSchema,
} from "../components/reactivatecustomer.js";
import {
  RetryVerifiedBusiness,
  RetryVerifiedBusiness$zodSchema,
} from "../components/retryverifiedbusiness.js";
import {
  RetryVerifiedPersonal,
  RetryVerifiedPersonal$zodSchema,
} from "../components/retryverifiedpersonal.js";
import {
  RetryVerifiedSoleProp,
  RetryVerifiedSoleProp$zodSchema,
} from "../components/retryverifiedsoleprop.js";
import {
  SuspendCustomer,
  SuspendCustomer$zodSchema,
} from "../components/suspendcustomer.js";
import {
  UpdateUnverifiedAndReceiveOnly,
  UpdateUnverifiedAndReceiveOnly$zodSchema,
} from "../components/updateunverifiedandreceiveonly.js";
import {
  UpdateVerifiedBusiness,
  UpdateVerifiedBusiness$zodSchema,
} from "../components/updateverifiedbusiness.js";
import {
  UpdateVerifiedPersonal,
  UpdateVerifiedPersonal$zodSchema,
} from "../components/updateverifiedpersonal.js";
import {
  UpgradeToVerifiedBusiness,
  UpgradeToVerifiedBusiness$zodSchema,
} from "../components/upgradetoverifiedbusiness.js";
import {
  UpgradeToVerifiedPersonal,
  UpgradeToVerifiedPersonal$zodSchema,
} from "../components/upgradetoverifiedpersonal.js";
import {
  UpgradeToVerifiedSoleProp,
  UpgradeToVerifiedSoleProp$zodSchema,
} from "../components/upgradetoverifiedsoleprop.js";

/**
 * Parameters for updating a Customer
 */
export type UpdateRequestBody =
  | DeactivateCustomer
  | ReactivateCustomer
  | SuspendCustomer
  | UpdateUnverifiedAndReceiveOnly
  | UpdateVerifiedPersonal
  | UpdateVerifiedBusiness
  | UpgradeToVerifiedPersonal
  | RetryVerifiedPersonal
  | UpgradeToVerifiedBusiness
  | RetryVerifiedBusiness
  | UpgradeToVerifiedSoleProp
  | RetryVerifiedSoleProp;

export const UpdateRequestBody$zodSchema: z.ZodType<
  UpdateRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  DeactivateCustomer$zodSchema,
  ReactivateCustomer$zodSchema,
  SuspendCustomer$zodSchema,
  UpdateUnverifiedAndReceiveOnly$zodSchema,
  UpdateVerifiedPersonal$zodSchema,
  UpdateVerifiedBusiness$zodSchema,
  UpgradeToVerifiedPersonal$zodSchema,
  RetryVerifiedPersonal$zodSchema,
  UpgradeToVerifiedBusiness$zodSchema,
  RetryVerifiedBusiness$zodSchema,
  UpgradeToVerifiedSoleProp$zodSchema,
  RetryVerifiedSoleProp$zodSchema,
]).describe("Parameters for updating a Customer");

export type UpdateRequest = {
  id: string;
  RequestBody:
    | DeactivateCustomer
    | ReactivateCustomer
    | SuspendCustomer
    | UpdateUnverifiedAndReceiveOnly
    | UpdateVerifiedPersonal
    | UpdateVerifiedBusiness
    | UpgradeToVerifiedPersonal
    | RetryVerifiedPersonal
    | UpgradeToVerifiedBusiness
    | RetryVerifiedBusiness
    | UpgradeToVerifiedSoleProp
    | RetryVerifiedSoleProp;
};

export const UpdateRequest$zodSchema: z.ZodType<
  UpdateRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.union([
    DeactivateCustomer$zodSchema,
    ReactivateCustomer$zodSchema,
    SuspendCustomer$zodSchema,
    UpdateUnverifiedAndReceiveOnly$zodSchema,
    UpdateVerifiedPersonal$zodSchema,
    UpdateVerifiedBusiness$zodSchema,
    UpgradeToVerifiedPersonal$zodSchema,
    RetryVerifiedPersonal$zodSchema,
    UpgradeToVerifiedBusiness$zodSchema,
    RetryVerifiedBusiness$zodSchema,
    UpgradeToVerifiedSoleProp$zodSchema,
    RetryVerifiedSoleProp$zodSchema,
  ]),
  id: z.string().describe("Customer unique identifier"),
});

/**
 * forbidden
 */
export type UpdateForbiddenResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const UpdateForbiddenResponseBody$zodSchema: z.ZodType<
  UpdateForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("forbidden");

/**
 * bad request
 */
export type UpdateBadRequestResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const UpdateBadRequestResponseBody$zodSchema: z.ZodType<
  UpdateBadRequestResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("bad request");

export type UpdateResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Customer?: Customer | undefined;
  fourHundredApplicationVndDwollaV1HalPlusJsonObject?:
    | UpdateBadRequestResponseBody
    | undefined;
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonObject?:
    | UpdateForbiddenResponseBody
    | undefined;
};

export const UpdateResponse$zodSchema: z.ZodType<
  UpdateResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Customer: Customer$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    UpdateForbiddenResponseBody$zodSchema
  ).optional(),
  fourHundredApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    UpdateBadRequestResponseBody$zodSchema
  ).optional(),
});
