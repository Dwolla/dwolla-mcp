/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  DuplicateResourceSchema,
  DuplicateResourceSchema$zodSchema,
} from "../components/duplicateresourceschema.js";
import {
  InvalidFileTypeSchema,
  InvalidFileTypeSchema$zodSchema,
} from "../components/invalidfiletypeschema.js";
import {
  InvalidResourceStateSchema,
  InvalidResourceStateSchema$zodSchema,
} from "../components/invalidresourcestateschema.js";
import {
  MaximumNumberOfResourcesSchema,
  MaximumNumberOfResourcesSchema$zodSchema,
} from "../components/maximumnumberofresourcesschema.js";
import {
  NotAuthorizedSchema,
  NotAuthorizedSchema$zodSchema,
} from "../components/notauthorizedschema.js";

export type CreateCustomerDocumentFile = {
  fileName: string;
  content: Uint8Array | string;
};

export const CreateCustomerDocumentFile$zodSchema: z.ZodType<
  CreateCustomerDocumentFile,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string().base64(),
  fileName: z.string(),
});

/**
 * Upload a document for a customer.
 */
export type CreateCustomerDocumentRequestBody = {
  documentType?: string | undefined;
  file?: CreateCustomerDocumentFile | Blob | undefined;
};

export const CreateCustomerDocumentRequestBody$zodSchema: z.ZodType<
  CreateCustomerDocumentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  documentType: z.string().optional(),
  file: z.lazy(() => CreateCustomerDocumentFile$zodSchema).optional(),
}).describe("Upload a document for a customer.");

export type CreateCustomerDocumentRequest = {
  id: string;
  RequestBody: CreateCustomerDocumentRequestBody;
};

export const CreateCustomerDocumentRequest$zodSchema: z.ZodType<
  CreateCustomerDocumentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => CreateCustomerDocumentRequestBody$zodSchema),
  id: z.string().describe("customer unique identifier"),
});

/**
 * request entity too large
 */
export type CreateCustomerDocumentRequestEntityTooLargeResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const CreateCustomerDocumentRequestEntityTooLargeResponseBody$zodSchema:
  z.ZodType<
    CreateCustomerDocumentRequestEntityTooLargeResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    code: z.string().optional(),
    message: z.string().optional(),
  }).describe("request entity too large");

/**
 * not found
 */
export type CreateCustomerDocumentNotFoundResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const CreateCustomerDocumentNotFoundResponseBody$zodSchema: z.ZodType<
  CreateCustomerDocumentNotFoundResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("not found");

/**
 * not found
 */
export type CreateCustomerDocumentForbiddenResponseBody =
  | InvalidResourceStateSchema
  | NotAuthorizedSchema;

export const CreateCustomerDocumentForbiddenResponseBody$zodSchema: z.ZodType<
  CreateCustomerDocumentForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  InvalidResourceStateSchema$zodSchema,
  NotAuthorizedSchema$zodSchema,
]).describe("not found");

/**
 * Bad Request
 */
export type CreateCustomerDocumentBadRequestResponseBody =
  | MaximumNumberOfResourcesSchema
  | InvalidFileTypeSchema
  | DuplicateResourceSchema;

export const CreateCustomerDocumentBadRequestResponseBody$zodSchema: z.ZodType<
  CreateCustomerDocumentBadRequestResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  MaximumNumberOfResourcesSchema$zodSchema,
  InvalidFileTypeSchema$zodSchema,
  DuplicateResourceSchema$zodSchema,
]).describe("Bad Request");

export type CreateCustomerDocumentResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  fourHundredApplicationVndDwollaV1HalPlusJsonOneOf?:
    | MaximumNumberOfResourcesSchema
    | InvalidFileTypeSchema
    | DuplicateResourceSchema
    | undefined;
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonOneOf?:
    | InvalidResourceStateSchema
    | NotAuthorizedSchema
    | undefined;
  fourHundredAndFourApplicationVndDwollaV1HalPlusJsonObject?:
    | CreateCustomerDocumentNotFoundResponseBody
    | undefined;
  fourHundredAndThirteenApplicationVndDwollaV1HalPlusJsonObject?:
    | CreateCustomerDocumentRequestEntityTooLargeResponseBody
    | undefined;
  Headers: { [k: string]: Array<string> };
};

export const CreateCustomerDocumentResponse$zodSchema: z.ZodType<
  CreateCustomerDocumentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Headers: z.record(z.array(z.string())),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndFourApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    CreateCustomerDocumentNotFoundResponseBody$zodSchema
  ).optional(),
  fourHundredAndThirteenApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    CreateCustomerDocumentRequestEntityTooLargeResponseBody$zodSchema
  ).optional(),
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonOneOf: z.union([
    InvalidResourceStateSchema$zodSchema,
    NotAuthorizedSchema$zodSchema,
  ]).optional(),
  fourHundredApplicationVndDwollaV1HalPlusJsonOneOf: z.union([
    MaximumNumberOfResourcesSchema$zodSchema,
    InvalidFileTypeSchema$zodSchema,
    DuplicateResourceSchema$zodSchema,
  ]).optional(),
});
