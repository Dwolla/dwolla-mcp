/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  BadRequestError,
  BadRequestError$zodSchema,
} from "../components/badrequesterror.js";
import {
  BeneficialOwnerWithPassport,
  BeneficialOwnerWithPassport$zodSchema,
} from "../components/beneficialownerwithpassport.js";
import {
  BeneficialOwnerWithSsn,
  BeneficialOwnerWithSsn$zodSchema,
} from "../components/beneficialownerwithssn.js";
import {
  ForbiddenError,
  ForbiddenError$zodSchema,
} from "../components/forbiddenerror.js";
import {
  NotFoundError,
  NotFoundError$zodSchema,
} from "../components/notfounderror.js";

/**
 * Parameters for creating a beneficial owner
 */
export type CreateBeneficialOwnerForCustomerRequestBody =
  | BeneficialOwnerWithSsn
  | BeneficialOwnerWithPassport;

export const CreateBeneficialOwnerForCustomerRequestBody$zodSchema: z.ZodType<
  CreateBeneficialOwnerForCustomerRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  BeneficialOwnerWithSsn$zodSchema,
  BeneficialOwnerWithPassport$zodSchema,
]).describe("Parameters for creating a beneficial owner");

export type CreateBeneficialOwnerForCustomerRequest = {
  id: string;
  RequestBody: BeneficialOwnerWithSsn | BeneficialOwnerWithPassport;
};

export const CreateBeneficialOwnerForCustomerRequest$zodSchema: z.ZodType<
  CreateBeneficialOwnerForCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.union([
    BeneficialOwnerWithSsn$zodSchema,
    BeneficialOwnerWithPassport$zodSchema,
  ]),
  id: z.string().describe("Customer ID for which to create a Beneficial Owner"),
});

export type CreateBeneficialOwnerForCustomerResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  BadRequestError?: BadRequestError | undefined;
  ForbiddenError?: ForbiddenError | undefined;
  NotFoundError?: NotFoundError | undefined;
  Headers: { [k: string]: Array<string> };
};

export const CreateBeneficialOwnerForCustomerResponse$zodSchema: z.ZodType<
  CreateBeneficialOwnerForCustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequestError: BadRequestError$zodSchema.optional(),
  ContentType: z.string(),
  ForbiddenError: ForbiddenError$zodSchema.optional(),
  Headers: z.record(z.array(z.string())),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
