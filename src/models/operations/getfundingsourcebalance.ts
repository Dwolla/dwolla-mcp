/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { HalLink, HalLink$zodSchema } from "../components/hallink.js";

export type GetFundingSourceBalanceRequest = { id: string };

export const GetFundingSourceBalanceRequest$zodSchema: z.ZodType<
  GetFundingSourceBalanceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().describe("ID of funding source to retrieve the balance for"),
});

/**
 * not found
 */
export type GetFundingSourceBalanceNotFoundResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const GetFundingSourceBalanceNotFoundResponseBody$zodSchema: z.ZodType<
  GetFundingSourceBalanceNotFoundResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("not found");

export type GetFundingSourceBalanceSelf = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export const GetFundingSourceBalanceSelf$zodSchema: z.ZodType<
  GetFundingSourceBalanceSelf,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  resourceType: z.string().optional(),
  type: z.string().optional(),
});

export type FundingSource = {
  href?: string | undefined;
  type?: string | undefined;
  resourceType?: string | undefined;
};

export const FundingSource$zodSchema: z.ZodType<
  FundingSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string().optional(),
  resourceType: z.string().optional(),
  type: z.string().optional(),
});

export type GetFundingSourceBalanceLinks = {
  self?: GetFundingSourceBalanceSelf | undefined;
  fundingSource?: FundingSource | undefined;
};

export const GetFundingSourceBalanceLinks$zodSchema: z.ZodType<
  GetFundingSourceBalanceLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  fundingSource: z.lazy(() => FundingSource$zodSchema).optional(),
  self: z.lazy(() => GetFundingSourceBalanceSelf$zodSchema).optional(),
});

export type Available = {
  value?: string | undefined;
  currency?: string | undefined;
};

export const Available$zodSchema: z.ZodType<Available, z.ZodTypeDef, unknown> =
  z.object({
    currency: z.string().optional(),
    value: z.string().optional(),
  });

export type Closing = {
  value?: string | undefined;
  currency?: string | undefined;
};

export const Closing$zodSchema: z.ZodType<Closing, z.ZodTypeDef, unknown> = z
  .object({
    currency: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * Response for retrieving balance of a bank account verified through Open Banking
 */
export type BankBalanceResponse = {
  _links?: GetFundingSourceBalanceLinks | undefined;
  available?: Available | undefined;
  closing?: Closing | undefined;
  lastUpdated?: string | undefined;
};

export const BankBalanceResponse$zodSchema: z.ZodType<
  BankBalanceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => GetFundingSourceBalanceLinks$zodSchema).optional(),
  available: z.lazy(() => Available$zodSchema).optional(),
  closing: z.lazy(() => Closing$zodSchema).optional(),
  lastUpdated: z.string().optional(),
}).describe(
  "Response for retrieving balance of a bank account verified through Open Banking",
);

export type Balance = {
  value?: string | undefined;
  currency?: string | undefined;
};

export const Balance$zodSchema: z.ZodType<Balance, z.ZodTypeDef, unknown> = z
  .object({
    currency: z.string().optional(),
    value: z.string().optional(),
  });

export type Total = {
  value?: string | undefined;
  currency?: string | undefined;
};

export const Total$zodSchema: z.ZodType<Total, z.ZodTypeDef, unknown> = z
  .object({
    currency: z.string().optional(),
    value: z.string().optional(),
  });

/**
 * Response for retrieving balance of a Dwolla Balance funding source
 */
export type DwollaBalanceResponse = {
  _links?: { [k: string]: HalLink } | undefined;
  balance?: Balance | undefined;
  total?: Total | undefined;
  lastUpdated?: string | undefined;
};

export const DwollaBalanceResponse$zodSchema: z.ZodType<
  DwollaBalanceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(HalLink$zodSchema).optional(),
  balance: z.lazy(() => Balance$zodSchema).optional(),
  lastUpdated: z.string().optional(),
  total: z.lazy(() => Total$zodSchema).optional(),
}).describe(
  "Response for retrieving balance of a Dwolla Balance funding source",
);

/**
 * successful operation
 */
export type GetFundingSourceBalanceResponseBody =
  | DwollaBalanceResponse
  | BankBalanceResponse;

export const GetFundingSourceBalanceResponseBody$zodSchema: z.ZodType<
  GetFundingSourceBalanceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => DwollaBalanceResponse$zodSchema),
  z.lazy(() => BankBalanceResponse$zodSchema),
]).describe("successful operation");

export type GetFundingSourceBalanceResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  oneOf?: DwollaBalanceResponse | BankBalanceResponse | undefined;
  object?: GetFundingSourceBalanceNotFoundResponseBody | undefined;
};

export const GetFundingSourceBalanceResponse$zodSchema: z.ZodType<
  GetFundingSourceBalanceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() => GetFundingSourceBalanceNotFoundResponseBody$zodSchema)
    .optional(),
  oneOf: z.union([
    z.lazy(() => DwollaBalanceResponse$zodSchema),
    z.lazy(() => BankBalanceResponse$zodSchema),
  ]).optional(),
});
