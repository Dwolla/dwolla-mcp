/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Must be set to "client_credentials"
 */
export const GrantType$zodSchema = z.enum([
  "client_credentials",
]).describe("Must be set to \"client_credentials\"");

export type GrantType = z.infer<typeof GrantType$zodSchema>;

/**
 * OAuth get token request. Client credentials are sent in the Authorization header using Basic authentication.
 */
export type CreateApplicationAccessTokenRequest = { grant_type: GrantType };

export const CreateApplicationAccessTokenRequest$zodSchema: z.ZodType<
  CreateApplicationAccessTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  grant_type: GrantType$zodSchema,
}).describe(
  "OAuth get token request. Client credentials are sent in the Authorization header using Basic authentication.",
);

/**
 * Unauthorized
 */
export type CreateApplicationAccessTokenUnauthorizedResponseBody = {
  error?: string | undefined;
};

export const CreateApplicationAccessTokenUnauthorizedResponseBody$zodSchema:
  z.ZodType<
    CreateApplicationAccessTokenUnauthorizedResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    error: z.string().optional(),
  }).describe("Unauthorized");

/**
 * The type of token, always "bearer"
 */
export const TokenType$zodSchema = z.enum([
  "bearer",
]).describe("The type of token, always \"bearer\"");

export type TokenType = z.infer<typeof TokenType$zodSchema>;

/**
 * successful operation
 */
export type CreateApplicationAccessTokenResponseBodyBearer = {
  access_token: string;
  token_type: TokenType;
  expires_in: number;
};

export const CreateApplicationAccessTokenResponseBodyBearer$zodSchema:
  z.ZodType<
    CreateApplicationAccessTokenResponseBodyBearer,
    z.ZodTypeDef,
    unknown
  > = z.object({
    access_token: z.string(),
    expires_in: z.number().int(),
    token_type: TokenType$zodSchema,
  }).describe("successful operation");

export type CreateApplicationAccessTokenResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  twoHundredApplicationJsonObject?:
    | CreateApplicationAccessTokenResponseBodyBearer
    | undefined;
  fourHundredAndOneApplicationJsonObject?:
    | CreateApplicationAccessTokenUnauthorizedResponseBody
    | undefined;
};

export const CreateApplicationAccessTokenResponse$zodSchema: z.ZodType<
  CreateApplicationAccessTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndOneApplicationJsonObject: z.lazy(() =>
    CreateApplicationAccessTokenUnauthorizedResponseBody$zodSchema
  ).optional(),
  twoHundredApplicationJsonObject: z.lazy(() =>
    CreateApplicationAccessTokenResponseBodyBearer$zodSchema
  ).optional(),
});
