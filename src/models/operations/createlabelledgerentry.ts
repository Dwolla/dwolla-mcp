/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  BadRequestError,
  BadRequestError$zodSchema,
} from "../components/badrequesterror.js";
import {
  ForbiddenError,
  ForbiddenError$zodSchema,
} from "../components/forbiddenerror.js";
import {
  NotFoundError,
  NotFoundError$zodSchema,
} from "../components/notfounderror.js";

export type CreateLabelLedgerEntryAmount = { value: string; currency: string };

export const CreateLabelLedgerEntryAmount$zodSchema: z.ZodType<
  CreateLabelLedgerEntryAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string(),
  value: z.string(),
});

/**
 * Parameters to create a label ledger entry
 */
export type CreateLabelLedgerEntryRequestBody = {
  amount: CreateLabelLedgerEntryAmount;
};

export const CreateLabelLedgerEntryRequestBody$zodSchema: z.ZodType<
  CreateLabelLedgerEntryRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.lazy(() => CreateLabelLedgerEntryAmount$zodSchema),
}).describe("Parameters to create a label ledger entry");

export type CreateLabelLedgerEntryRequest = {
  id: string;
  RequestBody: CreateLabelLedgerEntryRequestBody;
};

export const CreateLabelLedgerEntryRequest$zodSchema: z.ZodType<
  CreateLabelLedgerEntryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => CreateLabelLedgerEntryRequestBody$zodSchema),
  id: z.string().describe("The Id of the Label to update."),
});

export type CreateLabelLedgerEntryResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  BadRequestError?: BadRequestError | undefined;
  ForbiddenError?: ForbiddenError | undefined;
  NotFoundError?: NotFoundError | undefined;
  Headers: { [k: string]: Array<string> };
};

export const CreateLabelLedgerEntryResponse$zodSchema: z.ZodType<
  CreateLabelLedgerEntryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  BadRequestError: BadRequestError$zodSchema.optional(),
  ContentType: z.string(),
  ForbiddenError: ForbiddenError$zodSchema.optional(),
  Headers: z.record(z.array(z.string())),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
