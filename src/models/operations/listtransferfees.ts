/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { HalLink, HalLink$zodSchema } from "../components/hallink.js";
import {
  NotFoundError,
  NotFoundError$zodSchema,
} from "../components/notfounderror.js";

export type ListTransferFeesRequest = { id: string };

export const ListTransferFeesRequest$zodSchema: z.ZodType<
  ListTransferFeesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().describe("ID of transfer to retrieve fees for"),
});

export type ListTransferFeesAmount = {
  value?: string | undefined;
  currency?: string | undefined;
};

export const ListTransferFeesAmount$zodSchema: z.ZodType<
  ListTransferFeesAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string().optional(),
  value: z.string().optional(),
});

export type Transaction = {
  _links?: { [k: string]: HalLink } | undefined;
  id?: string | undefined;
  status?: string | undefined;
  amount?: ListTransferFeesAmount | undefined;
  created?: string | undefined;
};

export const Transaction$zodSchema: z.ZodType<
  Transaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.record(HalLink$zodSchema).optional(),
  amount: z.lazy(() => ListTransferFeesAmount$zodSchema).optional(),
  created: z.string().datetime({ offset: true }).optional(),
  id: z.string().optional(),
  status: z.string().optional(),
});

/**
 * successful operation
 */
export type ListTransferFeesResponseBody = {
  transactions?: Array<Transaction> | undefined;
  total?: string | undefined;
};

export const ListTransferFeesResponseBody$zodSchema: z.ZodType<
  ListTransferFeesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.string().optional(),
  transactions: z.array(z.lazy(() => Transaction$zodSchema)).optional(),
}).describe("successful operation");

export type ListTransferFeesResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: ListTransferFeesResponseBody | undefined;
  NotFoundError?: NotFoundError | undefined;
};

export const ListTransferFeesResponse$zodSchema: z.ZodType<
  ListTransferFeesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() => ListTransferFeesResponseBody$zodSchema).optional(),
});
