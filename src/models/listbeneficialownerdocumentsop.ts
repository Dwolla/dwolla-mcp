/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Documents, Documents$zodSchema } from "./documents.js";
import { ForbiddenError, ForbiddenError$zodSchema } from "./forbiddenerror.js";
import { NotFoundError, NotFoundError$zodSchema } from "./notfounderror.js";

export type ListBeneficialOwnerDocumentsRequest = { id: string };

export const ListBeneficialOwnerDocumentsRequest$zodSchema: z.ZodType<
  ListBeneficialOwnerDocumentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().describe("beneficial owner unique identifier"),
});

export type ListBeneficialOwnerDocumentsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Documents?: Documents | undefined;
  ForbiddenError?: ForbiddenError | undefined;
  NotFoundError?: NotFoundError | undefined;
};

export const ListBeneficialOwnerDocumentsResponse$zodSchema: z.ZodType<
  ListBeneficialOwnerDocumentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Documents: Documents$zodSchema.optional(),
  ForbiddenError: ForbiddenError$zodSchema.optional(),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
