/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Events, Events$zodSchema } from "./events.js";
import { NotFoundError, NotFoundError$zodSchema } from "./notfounderror.js";

export type ListEventsRequest = {
  limit?: number | undefined;
  offset?: number | undefined;
};

export const ListEventsRequest$zodSchema: z.ZodType<
  ListEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().describe("How many results to return").optional(),
  offset: z.number().int().describe("How many results to skip").optional(),
});

export type ListEventsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  Events?: Events | undefined;
  NotFoundError?: NotFoundError | undefined;
};

export const ListEventsResponse$zodSchema: z.ZodType<
  ListEventsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  Events: Events$zodSchema.optional(),
  NotFoundError: NotFoundError$zodSchema.optional(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
