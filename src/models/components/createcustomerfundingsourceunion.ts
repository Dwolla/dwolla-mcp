/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Type of funding source. Must be set to "virtual" for VAN creation.
 */
export const Type$zodSchema = z.enum([
  "virtual",
]).describe(
  "Type of funding source. Must be set to \"virtual\" for VAN creation.",
);

export type Type = z.infer<typeof Type$zodSchema>;

/**
 * Type of bank account. Must be "checking" for Virtual Account Numbers.
 */
export const BankAccountTypeChecking$zodSchema = z.enum([
  "checking",
]).describe(
  "Type of bank account. Must be \"checking\" for Virtual Account Numbers.",
);

export type BankAccountTypeChecking = z.infer<
  typeof BankAccountTypeChecking$zodSchema
>;

/**
 * Schema for creating a Virtual Account Number (VAN) . VANs are unique account numbers for receiving external transactions into a Dwolla Balance.
 */
export type CreateCustomerFundingSourceChecking = {
  name: string;
  type: Type;
  bankAccountType: BankAccountTypeChecking;
};

export const CreateCustomerFundingSourceChecking$zodSchema: z.ZodType<
  CreateCustomerFundingSourceChecking,
  z.ZodTypeDef,
  unknown
> = z.object({
  bankAccountType: BankAccountTypeChecking$zodSchema,
  name: z.string(),
  type: Type$zodSchema,
}).describe(
  "Schema for creating a Virtual Account Number (VAN) . VANs are unique account numbers for receiving external transactions into a Dwolla Balance.",
);

export type CreateCustomerFundingSourceExchange = { href: string };

export const CreateCustomerFundingSourceExchange$zodSchema: z.ZodType<
  CreateCustomerFundingSourceExchange,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
});

export type CreateCustomerFundingSourceOnDemandAuthorization2 = {
  href: string;
};

export const CreateCustomerFundingSourceOnDemandAuthorization2$zodSchema:
  z.ZodType<
    CreateCustomerFundingSourceOnDemandAuthorization2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

export type CreateCustomerFundingSourceLinks2 = {
  exchange: CreateCustomerFundingSourceExchange;
  onDemandAuthorization?:
    | CreateCustomerFundingSourceOnDemandAuthorization2
    | undefined;
};

export const CreateCustomerFundingSourceLinks2$zodSchema: z.ZodType<
  CreateCustomerFundingSourceLinks2,
  z.ZodTypeDef,
  unknown
> = z.object({
  exchange: z.lazy(() => CreateCustomerFundingSourceExchange$zodSchema),
  onDemandAuthorization: z.lazy(() =>
    CreateCustomerFundingSourceOnDemandAuthorization2$zodSchema
  ).optional(),
});

/**
 * Type of bank account
 */
export const CreateCustomerFundingSourceBankAccountType2$zodSchema = z.enum([
  "checking",
  "savings",
  "general-ledger",
  "loan",
]).describe("Type of bank account");

export type CreateCustomerFundingSourceBankAccountType2 = z.infer<
  typeof CreateCustomerFundingSourceBankAccountType2$zodSchema
>;

/**
 * Schema for creating a funding source using an exchange resource. This method is used when the bank account information is obtained via Instant Account Verification (IAV) through an exchange partner (like Plaid, Visa, MX, or Finicity).
 */
export type CreateCustomerFundingSource2 = {
  _links: CreateCustomerFundingSourceLinks2;
  bankAccountType: CreateCustomerFundingSourceBankAccountType2;
  name: string;
};

export const CreateCustomerFundingSource2$zodSchema: z.ZodType<
  CreateCustomerFundingSource2,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => CreateCustomerFundingSourceLinks2$zodSchema),
  bankAccountType: CreateCustomerFundingSourceBankAccountType2$zodSchema,
  name: z.string(),
}).describe(
  "Schema for creating a funding source using an exchange resource. This method is used when the bank account information is obtained via Instant Account Verification (IAV) through an exchange partner (like Plaid, Visa, MX, or Finicity).",
);

/**
 * Type of bank account
 */
export const CreateCustomerFundingSourceBankAccountType1$zodSchema = z.enum([
  "checking",
  "savings",
  "general-ledger",
  "loan",
]).describe("Type of bank account");

export type CreateCustomerFundingSourceBankAccountType1 = z.infer<
  typeof CreateCustomerFundingSourceBankAccountType1$zodSchema
>;

export const Channel$zodSchema = z.enum([
  "wire",
]);

export type Channel = z.infer<typeof Channel$zodSchema>;

export type CreateCustomerFundingSourceOnDemandAuthorization1 = {
  href: string;
};

export const CreateCustomerFundingSourceOnDemandAuthorization1$zodSchema:
  z.ZodType<
    CreateCustomerFundingSourceOnDemandAuthorization1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    href: z.string(),
  });

export type CreateCustomerFundingSourceLinks1 = {
  onDemandAuthorization?:
    | CreateCustomerFundingSourceOnDemandAuthorization1
    | undefined;
};

export const CreateCustomerFundingSourceLinks1$zodSchema: z.ZodType<
  CreateCustomerFundingSourceLinks1,
  z.ZodTypeDef,
  unknown
> = z.object({
  onDemandAuthorization: z.lazy(() =>
    CreateCustomerFundingSourceOnDemandAuthorization1$zodSchema
  ).optional(),
});

/**
 * Schema for creating a basic bank funding source using routing and account numbers. This is the traditional method of adding a bank account.
 */
export type CreateCustomerFundingSource1 = {
  routingNumber: string;
  accountNumber: string;
  bankAccountType: CreateCustomerFundingSourceBankAccountType1;
  name: string;
  plaidToken?: string | undefined;
  channels?: Array<Channel> | undefined;
  _links?: CreateCustomerFundingSourceLinks1 | undefined;
};

export const CreateCustomerFundingSource1$zodSchema: z.ZodType<
  CreateCustomerFundingSource1,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => CreateCustomerFundingSourceLinks1$zodSchema).optional(),
  accountNumber: z.string(),
  bankAccountType: CreateCustomerFundingSourceBankAccountType1$zodSchema,
  channels: z.array(Channel$zodSchema).optional(),
  name: z.string(),
  plaidToken: z.string().optional(),
  routingNumber: z.string(),
}).describe(
  "Schema for creating a basic bank funding source using routing and account numbers. This is the traditional method of adding a bank account.",
);

export type CreateCustomerFundingSourceUnion =
  | CreateCustomerFundingSource2
  | CreateCustomerFundingSourceChecking
  | CreateCustomerFundingSource1;

export const CreateCustomerFundingSourceUnion$zodSchema: z.ZodType<
  CreateCustomerFundingSourceUnion,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateCustomerFundingSource2$zodSchema),
  z.lazy(() => CreateCustomerFundingSourceChecking$zodSchema),
  z.lazy(() => CreateCustomerFundingSource1$zodSchema),
]);
