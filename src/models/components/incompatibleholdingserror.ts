/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type IncompatibleHoldingsErrorLinks = {};

export const IncompatibleHoldingsErrorLinks$zodSchema: z.ZodType<
  IncompatibleHoldingsErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

export type IncompatibleHoldingsErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: IncompatibleHoldingsErrorLinks | undefined;
};

export const IncompatibleHoldingsErrorError$zodSchema: z.ZodType<
  IncompatibleHoldingsErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => IncompatibleHoldingsErrorLinks$zodSchema).optional(),
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
});

export type IncompatibleHoldingsErrorEmbedded = {
  errors?: Array<IncompatibleHoldingsErrorError> | undefined;
};

export const IncompatibleHoldingsErrorEmbedded$zodSchema: z.ZodType<
  IncompatibleHoldingsErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => IncompatibleHoldingsErrorError$zodSchema))
    .optional(),
});

export type IncompatibleHoldingsError = {
  code: string;
  message: string;
  _embedded?: IncompatibleHoldingsErrorEmbedded | undefined;
};

export const IncompatibleHoldingsError$zodSchema: z.ZodType<
  IncompatibleHoldingsError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _embedded: z.lazy(() => IncompatibleHoldingsErrorEmbedded$zodSchema)
    .optional(),
  code: z.string(),
  message: z.string(),
});
