/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type StatusInvalidErrorLinks = {};

export const StatusInvalidErrorLinks$zodSchema: z.ZodType<
  StatusInvalidErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

export type StatusInvalidErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: StatusInvalidErrorLinks | undefined;
};

export const StatusInvalidErrorError$zodSchema: z.ZodType<
  StatusInvalidErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => StatusInvalidErrorLinks$zodSchema).optional(),
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
});

export type StatusInvalidErrorEmbedded = {
  errors?: Array<StatusInvalidErrorError> | undefined;
};

export const StatusInvalidErrorEmbedded$zodSchema: z.ZodType<
  StatusInvalidErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => StatusInvalidErrorError$zodSchema)).optional(),
});

export type StatusInvalidError = {
  code: string;
  message: string;
  _embedded?: StatusInvalidErrorEmbedded | undefined;
};

export const StatusInvalidError$zodSchema: z.ZodType<
  StatusInvalidError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _embedded: z.lazy(() => StatusInvalidErrorEmbedded$zodSchema).optional(),
  code: z.string(),
  message: z.string(),
});
