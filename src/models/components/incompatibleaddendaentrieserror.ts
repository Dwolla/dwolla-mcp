/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type IncompatibleAddendaEntriesErrorLinks = {};

export const IncompatibleAddendaEntriesErrorLinks$zodSchema: z.ZodType<
  IncompatibleAddendaEntriesErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

export type IncompatibleAddendaEntriesErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: IncompatibleAddendaEntriesErrorLinks | undefined;
};

export const IncompatibleAddendaEntriesErrorError$zodSchema: z.ZodType<
  IncompatibleAddendaEntriesErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => IncompatibleAddendaEntriesErrorLinks$zodSchema)
    .optional(),
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
});

export type IncompatibleAddendaEntriesErrorEmbedded = {
  errors?: Array<IncompatibleAddendaEntriesErrorError> | undefined;
};

export const IncompatibleAddendaEntriesErrorEmbedded$zodSchema: z.ZodType<
  IncompatibleAddendaEntriesErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => IncompatibleAddendaEntriesErrorError$zodSchema))
    .optional(),
});

export type IncompatibleAddendaEntriesError = {
  code: string;
  message: string;
  _embedded?: IncompatibleAddendaEntriesErrorEmbedded | undefined;
};

export const IncompatibleAddendaEntriesError$zodSchema: z.ZodType<
  IncompatibleAddendaEntriesError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _embedded: z.lazy(() => IncompatibleAddendaEntriesErrorEmbedded$zodSchema)
    .optional(),
  code: z.string(),
  message: z.string(),
});
