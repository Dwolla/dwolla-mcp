/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type InvalidSourceFundingSourceErrorLinks = {};

export const InvalidSourceFundingSourceErrorLinks$zodSchema: z.ZodType<
  InvalidSourceFundingSourceErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

export type InvalidSourceFundingSourceErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: InvalidSourceFundingSourceErrorLinks | undefined;
};

export const InvalidSourceFundingSourceErrorError$zodSchema: z.ZodType<
  InvalidSourceFundingSourceErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => InvalidSourceFundingSourceErrorLinks$zodSchema)
    .optional(),
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
});

export type InvalidSourceFundingSourceErrorEmbedded = {
  errors?: Array<InvalidSourceFundingSourceErrorError> | undefined;
};

export const InvalidSourceFundingSourceErrorEmbedded$zodSchema: z.ZodType<
  InvalidSourceFundingSourceErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => InvalidSourceFundingSourceErrorError$zodSchema))
    .optional(),
});

export type InvalidSourceFundingSourceError = {
  code: string;
  message: string;
  _embedded?: InvalidSourceFundingSourceErrorEmbedded | undefined;
};

export const InvalidSourceFundingSourceError$zodSchema: z.ZodType<
  InvalidSourceFundingSourceError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _embedded: z.lazy(() => InvalidSourceFundingSourceErrorEmbedded$zodSchema)
    .optional(),
  code: z.string(),
  message: z.string(),
});
