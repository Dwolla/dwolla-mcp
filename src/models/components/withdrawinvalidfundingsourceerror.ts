/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type WithdrawInvalidFundingSourceErrorLinks = {};

export const WithdrawInvalidFundingSourceErrorLinks$zodSchema: z.ZodType<
  WithdrawInvalidFundingSourceErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

export type WithdrawInvalidFundingSourceErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: WithdrawInvalidFundingSourceErrorLinks | undefined;
};

export const WithdrawInvalidFundingSourceErrorError$zodSchema: z.ZodType<
  WithdrawInvalidFundingSourceErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => WithdrawInvalidFundingSourceErrorLinks$zodSchema)
    .optional(),
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
});

export type WithdrawInvalidFundingSourceErrorEmbedded = {
  errors?: Array<WithdrawInvalidFundingSourceErrorError> | undefined;
};

export const WithdrawInvalidFundingSourceErrorEmbedded$zodSchema: z.ZodType<
  WithdrawInvalidFundingSourceErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(
    z.lazy(() => WithdrawInvalidFundingSourceErrorError$zodSchema),
  ).optional(),
});

export type WithdrawInvalidFundingSourceError = {
  code: string;
  message: string;
  _embedded?: WithdrawInvalidFundingSourceErrorEmbedded | undefined;
};

export const WithdrawInvalidFundingSourceError$zodSchema: z.ZodType<
  WithdrawInvalidFundingSourceError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _embedded: z.lazy(() => WithdrawInvalidFundingSourceErrorEmbedded$zodSchema)
    .optional(),
  code: z.string(),
  message: z.string(),
});
