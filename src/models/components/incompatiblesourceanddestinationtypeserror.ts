/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type IncompatibleSourceAndDestinationTypesErrorLinks = {};

export const IncompatibleSourceAndDestinationTypesErrorLinks$zodSchema:
  z.ZodType<
    IncompatibleSourceAndDestinationTypesErrorLinks,
    z.ZodTypeDef,
    unknown
  > = z.object({});

export type IncompatibleSourceAndDestinationTypesErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: IncompatibleSourceAndDestinationTypesErrorLinks | undefined;
};

export const IncompatibleSourceAndDestinationTypesErrorError$zodSchema:
  z.ZodType<
    IncompatibleSourceAndDestinationTypesErrorError,
    z.ZodTypeDef,
    unknown
  > = z.object({
    _links: z.lazy(() =>
      IncompatibleSourceAndDestinationTypesErrorLinks$zodSchema
    ).optional(),
    code: z.string().optional(),
    message: z.string().optional(),
    path: z.string().optional(),
  });

export type IncompatibleSourceAndDestinationTypesErrorEmbedded = {
  errors?: Array<IncompatibleSourceAndDestinationTypesErrorError> | undefined;
};

export const IncompatibleSourceAndDestinationTypesErrorEmbedded$zodSchema:
  z.ZodType<
    IncompatibleSourceAndDestinationTypesErrorEmbedded,
    z.ZodTypeDef,
    unknown
  > = z.object({
    errors: z.array(
      z.lazy(() => IncompatibleSourceAndDestinationTypesErrorError$zodSchema),
    ).optional(),
  });

export type IncompatibleSourceAndDestinationTypesError = {
  code: string;
  message: string;
  _embedded?: IncompatibleSourceAndDestinationTypesErrorEmbedded | undefined;
};

export const IncompatibleSourceAndDestinationTypesError$zodSchema: z.ZodType<
  IncompatibleSourceAndDestinationTypesError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _embedded: z.lazy(() =>
    IncompatibleSourceAndDestinationTypesErrorEmbedded$zodSchema
  ).optional(),
  code: z.string(),
  message: z.string(),
});
