/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type OperationBlockedErrorLinks = {};

export const OperationBlockedErrorLinks$zodSchema: z.ZodType<
  OperationBlockedErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

export type OperationBlockedErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: OperationBlockedErrorLinks | undefined;
};

export const OperationBlockedErrorError$zodSchema: z.ZodType<
  OperationBlockedErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => OperationBlockedErrorLinks$zodSchema).optional(),
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
});

export type OperationBlockedErrorEmbedded = {
  errors?: Array<OperationBlockedErrorError> | undefined;
};

export const OperationBlockedErrorEmbedded$zodSchema: z.ZodType<
  OperationBlockedErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => OperationBlockedErrorError$zodSchema))
    .optional(),
});

export type OperationBlockedError = {
  code: string;
  message: string;
  _embedded?: OperationBlockedErrorEmbedded | undefined;
};

export const OperationBlockedError$zodSchema: z.ZodType<
  OperationBlockedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _embedded: z.lazy(() => OperationBlockedErrorEmbedded$zodSchema).optional(),
  code: z.string(),
  message: z.string(),
});
