/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type StatusNotAllowedErrorLinks = {};

export const StatusNotAllowedErrorLinks$zodSchema: z.ZodType<
  StatusNotAllowedErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({});

export type StatusNotAllowedErrorError = {
  code?: string | undefined;
  message?: string | undefined;
  path?: string | undefined;
  _links?: StatusNotAllowedErrorLinks | undefined;
};

export const StatusNotAllowedErrorError$zodSchema: z.ZodType<
  StatusNotAllowedErrorError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _links: z.lazy(() => StatusNotAllowedErrorLinks$zodSchema).optional(),
  code: z.string().optional(),
  message: z.string().optional(),
  path: z.string().optional(),
});

export type StatusNotAllowedErrorEmbedded = {
  errors?: Array<StatusNotAllowedErrorError> | undefined;
};

export const StatusNotAllowedErrorEmbedded$zodSchema: z.ZodType<
  StatusNotAllowedErrorEmbedded,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => StatusNotAllowedErrorError$zodSchema))
    .optional(),
});

export type StatusNotAllowedError = {
  code: string;
  message: string;
  _embedded?: StatusNotAllowedErrorEmbedded | undefined;
};

export const StatusNotAllowedError$zodSchema: z.ZodType<
  StatusNotAllowedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  _embedded: z.lazy(() => StatusNotAllowedErrorEmbedded$zodSchema).optional(),
  code: z.string(),
  message: z.string(),
});
