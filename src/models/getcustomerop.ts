/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  UnverifiedBusinessCustomer,
  UnverifiedBusinessCustomer$zodSchema,
} from "./unverifiedbusinesscustomer.js";
import {
  UnverifiedCustomer,
  UnverifiedCustomer$zodSchema,
} from "./unverifiedcustomer.js";
import {
  VerifiedBusinessCustomer,
  VerifiedBusinessCustomer$zodSchema,
} from "./verifiedbusinesscustomer.js";
import {
  VerifiedPersonalCustomer,
  VerifiedPersonalCustomer$zodSchema,
} from "./verifiedpersonalcustomer.js";
import {
  VerifiedSolePropCustomer,
  VerifiedSolePropCustomer$zodSchema,
} from "./verifiedsolepropcustomer.js";

export type GetCustomerRequest = { id: string };

export const GetCustomerRequest$zodSchema: z.ZodType<
  GetCustomerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().describe("Customer unique identifier"),
});

/**
 * not found
 */
export type GetCustomerNotFoundResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const GetCustomerNotFoundResponseBody$zodSchema: z.ZodType<
  GetCustomerNotFoundResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("not found");

/**
 * forbidden
 */
export type GetCustomerForbiddenResponseBody = {
  code?: string | undefined;
  message?: string | undefined;
};

export const GetCustomerForbiddenResponseBody$zodSchema: z.ZodType<
  GetCustomerForbiddenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  message: z.string().optional(),
}).describe("forbidden");

/**
 * successful operation
 */
export type GetCustomerResponseBody =
  | UnverifiedCustomer
  | UnverifiedBusinessCustomer
  | VerifiedPersonalCustomer
  | VerifiedSolePropCustomer
  | VerifiedBusinessCustomer;

export const GetCustomerResponseBody$zodSchema: z.ZodType<
  GetCustomerResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  UnverifiedCustomer$zodSchema,
  UnverifiedBusinessCustomer$zodSchema,
  VerifiedPersonalCustomer$zodSchema,
  VerifiedSolePropCustomer$zodSchema,
  VerifiedBusinessCustomer$zodSchema,
]).describe("successful operation");

export type GetCustomerResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  twoHundredApplicationVndDwollaV1HalPlusJsonOneOf?:
    | UnverifiedCustomer
    | UnverifiedBusinessCustomer
    | VerifiedPersonalCustomer
    | VerifiedSolePropCustomer
    | VerifiedBusinessCustomer
    | undefined;
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonObject?:
    | GetCustomerForbiddenResponseBody
    | undefined;
  fourHundredAndFourApplicationVndDwollaV1HalPlusJsonObject?:
    | GetCustomerNotFoundResponseBody
    | undefined;
};

export const GetCustomerResponse$zodSchema: z.ZodType<
  GetCustomerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  fourHundredAndFourApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    GetCustomerNotFoundResponseBody$zodSchema
  ).optional(),
  fourHundredAndThreeApplicationVndDwollaV1HalPlusJsonObject: z.lazy(() =>
    GetCustomerForbiddenResponseBody$zodSchema
  ).optional(),
  twoHundredApplicationVndDwollaV1HalPlusJsonOneOf: z.union([
    UnverifiedCustomer$zodSchema,
    UnverifiedBusinessCustomer$zodSchema,
    VerifiedPersonalCustomer$zodSchema,
    VerifiedSolePropCustomer$zodSchema,
    VerifiedBusinessCustomer$zodSchema,
  ]).optional(),
});
