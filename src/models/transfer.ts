/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { HalLink, HalLink$zodSchema } from "./hallink.js";

export type TransferAmount1 = {
  value?: string | undefined;
  currency?: string | undefined;
};

export const TransferAmount1$zodSchema: z.ZodType<
  TransferAmount1,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string().optional(),
  value: z.string().optional(),
});

export type Clearing = {
  source?: string | undefined;
  destination?: string | undefined;
};

export const Clearing$zodSchema: z.ZodType<Clearing, z.ZodTypeDef, unknown> = z
  .object({
    destination: z.string().optional(),
    source: z.string().optional(),
  });

export type TransferMetadata = {
  paymentId?: string | undefined;
  note?: string | undefined;
};

export const TransferMetadata$zodSchema: z.ZodType<
  TransferMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  note: z.string().optional(),
  paymentId: z.string().optional(),
});

/**
 * Contains addenda information for the transfer
 */
export type SourceAddenda = { values?: Array<string> | undefined };

export const SourceAddenda$zodSchema: z.ZodType<
  SourceAddenda,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(z.string()).optional(),
}).describe("Contains addenda information for the transfer");

/**
 * Describes the purpose of the transaction
 */
export const SourceCompanyEntryDescription$zodSchema = z.enum([
  "REVERSAL",
  "RECLAIM",
  "NO CHECK",
  "AUTOENROLL",
  "REDEPCHECK",
  "RETURN FEE",
  "RETRY PMNT",
  "HEALTHCARE",
  "PAYMENT",
]).describe("Describes the purpose of the transaction");

export type SourceCompanyEntryDescription = z.infer<
  typeof SourceCompanyEntryDescription$zodSchema
>;

/**
 * Information sent to the source/originating bank account along with the transfer
 */
export type Source = {
  addenda?: SourceAddenda | undefined;
  beneficiaryName?: string | undefined;
  companyEntryDescription?: SourceCompanyEntryDescription | undefined;
  companyId?: string | undefined;
  companyName?: string | undefined;
  effectiveDate?: string | undefined;
  postingData?: string | undefined;
  routingNumber?: string | undefined;
  traceId?: string | undefined;
};

export const Source$zodSchema: z.ZodType<Source, z.ZodTypeDef, unknown> = z
  .object({
    addenda: z.lazy(() => SourceAddenda$zodSchema).optional(),
    beneficiaryName: z.string().optional(),
    companyEntryDescription: SourceCompanyEntryDescription$zodSchema.optional(),
    companyId: z.string().optional(),
    companyName: z.string().optional(),
    effectiveDate: z.string().date().optional(),
    postingData: z.string().optional(),
    routingNumber: z.string().optional(),
    traceId: z.string().optional(),
  }).describe(
    "Information sent to the source/originating bank account along with the transfer",
  );

/**
 * Contains addenda information for the transfer
 */
export type DestinationAddenda = { values?: Array<string> | undefined };

export const DestinationAddenda$zodSchema: z.ZodType<
  DestinationAddenda,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(z.string()).optional(),
}).describe("Contains addenda information for the transfer");

/**
 * Describes the purpose of the transaction
 */
export const DestinationCompanyEntryDescription$zodSchema = z.enum([
  "REVERSAL",
  "RECLAIM",
  "NO CHECK",
  "AUTOENROLL",
  "REDEPCHECK",
  "RETURN FEE",
  "RETRY PMNT",
  "HEALTHCARE",
  "PAYMENT",
]).describe("Describes the purpose of the transaction");

export type DestinationCompanyEntryDescription = z.infer<
  typeof DestinationCompanyEntryDescription$zodSchema
>;

/**
 * Information sent to the destination/receiving bank account along with the transfer
 */
export type AchDetailsDestination = {
  addenda?: DestinationAddenda | undefined;
  beneficiaryName?: string | undefined;
  companyEntryDescription?: DestinationCompanyEntryDescription | undefined;
  companyId?: string | undefined;
  companyName?: string | undefined;
  effectiveDate?: string | undefined;
  postingData?: string | undefined;
  routingNumber?: string | undefined;
  traceId?: string | undefined;
};

export const AchDetailsDestination$zodSchema: z.ZodType<
  AchDetailsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  addenda: z.lazy(() => DestinationAddenda$zodSchema).optional(),
  beneficiaryName: z.string().optional(),
  companyEntryDescription: DestinationCompanyEntryDescription$zodSchema
    .optional(),
  companyId: z.string().optional(),
  companyName: z.string().optional(),
  effectiveDate: z.string().date().optional(),
  postingData: z.string().optional(),
  routingNumber: z.string().optional(),
  traceId: z.string().optional(),
}).describe(
  "Information sent to the destination/receiving bank account along with the transfer",
);

/**
 * ACH-specific details for the transfer. Present when transfer was processed via ACH network.
 */
export type AchDetails = {
  source?: Source | undefined;
  destination?: AchDetailsDestination | undefined;
};

export const AchDetails$zodSchema: z.ZodType<
  AchDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.lazy(() => AchDetailsDestination$zodSchema).optional(),
  source: z.lazy(() => Source$zodSchema).optional(),
}).describe(
  "ACH-specific details for the transfer. Present when transfer was processed via ACH network.",
);

/**
 * RTP destination details with network identifiers
 */
export type RtpDetailsDestination = {
  remittanceData?: string | undefined;
  networkId?: string | undefined;
  endToEndReferenceId?: string | undefined;
};

export const RtpDetailsDestination$zodSchema: z.ZodType<
  RtpDetailsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  endToEndReferenceId: z.string().optional(),
  networkId: z.string().optional(),
  remittanceData: z.string().optional(),
}).describe("RTP destination details with network identifiers");

/**
 * Real-Time Payments (RTP) network specific details. Present when transfer was processed via RTP network.
 */
export type RtpDetails = { destination?: RtpDetailsDestination | undefined };

export const RtpDetails$zodSchema: z.ZodType<
  RtpDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.lazy(() => RtpDetailsDestination$zodSchema).optional(),
}).describe(
  "Real-Time Payments (RTP) network specific details. Present when transfer was processed via RTP network.",
);

/**
 * FedNow destination details with network identifiers
 */
export type FedNowDetailsDestination = {
  remittanceData?: string | undefined;
  networkId?: string | undefined;
  endToEndReferenceId?: string | undefined;
};

export const FedNowDetailsDestination$zodSchema: z.ZodType<
  FedNowDetailsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  endToEndReferenceId: z.string().optional(),
  networkId: z.string().optional(),
  remittanceData: z.string().optional(),
}).describe("FedNow destination details with network identifiers");

/**
 * FedNow Service network specific details. Present when transfer was processed via FedNow network.
 */
export type FedNowDetails = {
  destination?: FedNowDetailsDestination | undefined;
};

export const FedNowDetails$zodSchema: z.ZodType<
  FedNowDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.lazy(() => FedNowDetailsDestination$zodSchema).optional(),
}).describe(
  "FedNow Service network specific details. Present when transfer was processed via FedNow network.",
);

/**
 * The payment network used to process the transfer
 */
export const DestinationEnum$zodSchema = z.enum([
  "real-time-payments",
  "fed-now",
]).describe("The payment network used to process the transfer");

export type DestinationEnum = z.infer<typeof DestinationEnum$zodSchema>;

export type TransferProcessingChannel = {
  destination?: DestinationEnum | undefined;
};

export const TransferProcessingChannel$zodSchema: z.ZodType<
  TransferProcessingChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: DestinationEnum$zodSchema.optional(),
});

export type Transfer = {
  _links?: { [k: string]: HalLink } | undefined;
  id?: string | undefined;
  status?: string | undefined;
  amount?: TransferAmount1 | undefined;
  created?: string | undefined;
  clearing?: Clearing | undefined;
  metadata?: TransferMetadata | undefined;
  achDetails?: AchDetails | undefined;
  rtpDetails?: RtpDetails | undefined;
  fedNowDetails?: FedNowDetails | undefined;
  correlationId?: string | undefined;
  processingChannel?: TransferProcessingChannel | undefined;
};

export const Transfer$zodSchema: z.ZodType<Transfer, z.ZodTypeDef, unknown> = z
  .object({
    _links: z.record(HalLink$zodSchema).optional(),
    achDetails: z.lazy(() => AchDetails$zodSchema).optional(),
    amount: z.lazy(() => TransferAmount1$zodSchema).optional(),
    clearing: z.lazy(() => Clearing$zodSchema).optional(),
    correlationId: z.string().optional(),
    created: z.string().datetime({ offset: true }).optional(),
    fedNowDetails: z.lazy(() => FedNowDetails$zodSchema).optional(),
    id: z.string().optional(),
    metadata: z.lazy(() => TransferMetadata$zodSchema).optional(),
    processingChannel: z.lazy(() => TransferProcessingChannel$zodSchema)
      .optional(),
    rtpDetails: z.lazy(() => RtpDetails$zodSchema).optional(),
    status: z.string().optional(),
  });
