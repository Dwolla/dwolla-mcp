/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { HalLink, HalLink$zodSchema } from "./hallink.js";

export type TransferAmount1 = {
  value?: string | undefined;
  currency?: string | undefined;
};

export const TransferAmount1$zodSchema: z.ZodType<
  TransferAmount1,
  z.ZodTypeDef,
  unknown
> = z.object({
  currency: z.string().optional(),
  value: z.string().optional(),
});

export type Clearing = {
  source?: string | undefined;
  destination?: string | undefined;
};

export const Clearing$zodSchema: z.ZodType<Clearing, z.ZodTypeDef, unknown> = z
  .object({
    destination: z.string().optional(),
    source: z.string().optional(),
  });

export type TransferMetadata = {
  paymentId?: string | undefined;
  note?: string | undefined;
};

export const TransferMetadata$zodSchema: z.ZodType<
  TransferMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  note: z.string().optional(),
  paymentId: z.string().optional(),
});

export type SourceAddenda = { values?: Array<string> | undefined };

export const SourceAddenda$zodSchema: z.ZodType<
  SourceAddenda,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(z.string()).optional(),
});

export type Source = { addenda?: SourceAddenda | undefined };

export const Source$zodSchema: z.ZodType<Source, z.ZodTypeDef, unknown> = z
  .object({
    addenda: z.lazy(() => SourceAddenda$zodSchema).optional(),
  });

export type DestinationAddenda = { values?: Array<string> | undefined };

export const DestinationAddenda$zodSchema: z.ZodType<
  DestinationAddenda,
  z.ZodTypeDef,
  unknown
> = z.object({
  values: z.array(z.string()).optional(),
});

export type AchDetailsDestination = {
  addenda?: DestinationAddenda | undefined;
};

export const AchDetailsDestination$zodSchema: z.ZodType<
  AchDetailsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  addenda: z.lazy(() => DestinationAddenda$zodSchema).optional(),
});

export type AchDetails = {
  source?: Source | undefined;
  destination?: AchDetailsDestination | undefined;
};

export const AchDetails$zodSchema: z.ZodType<
  AchDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.lazy(() => AchDetailsDestination$zodSchema).optional(),
  source: z.lazy(() => Source$zodSchema).optional(),
});

export type RtpDetailsDestination = { remittanceData?: string | undefined };

export const RtpDetailsDestination$zodSchema: z.ZodType<
  RtpDetailsDestination,
  z.ZodTypeDef,
  unknown
> = z.object({
  remittanceData: z.string().optional(),
});

export type RtpDetails = { destination?: RtpDetailsDestination | undefined };

export const RtpDetails$zodSchema: z.ZodType<
  RtpDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.lazy(() => RtpDetailsDestination$zodSchema).optional(),
});

export type TransferProcessingChannel = { destination?: string | undefined };

export const TransferProcessingChannel$zodSchema: z.ZodType<
  TransferProcessingChannel,
  z.ZodTypeDef,
  unknown
> = z.object({
  destination: z.string().optional(),
});

export type Transfer = {
  _links?: { [k: string]: HalLink } | undefined;
  id?: string | undefined;
  status?: string | undefined;
  amount?: TransferAmount1 | undefined;
  created?: string | undefined;
  clearing?: Clearing | undefined;
  metadata?: TransferMetadata | undefined;
  achDetails?: AchDetails | undefined;
  rtpDetails?: RtpDetails | undefined;
  correlationId?: string | undefined;
  processingChannel?: TransferProcessingChannel | undefined;
};

export const Transfer$zodSchema: z.ZodType<Transfer, z.ZodTypeDef, unknown> = z
  .object({
    _links: z.record(HalLink$zodSchema).optional(),
    achDetails: z.lazy(() => AchDetails$zodSchema).optional(),
    amount: z.lazy(() => TransferAmount1$zodSchema).optional(),
    clearing: z.lazy(() => Clearing$zodSchema).optional(),
    correlationId: z.string().optional(),
    created: z.string().datetime({ offset: true }).optional(),
    id: z.string().optional(),
    metadata: z.lazy(() => TransferMetadata$zodSchema).optional(),
    processingChannel: z.lazy(() => TransferProcessingChannel$zodSchema)
      .optional(),
    rtpDetails: z.lazy(() => RtpDetails$zodSchema).optional(),
    status: z.string().optional(),
  });
